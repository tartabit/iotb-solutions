{
  "templateDef": [
    {
      "name": "Project ID",
      "key": "projectId",
      "desc": "ID supplied by NimbeLink for your GCP PubSub connection.",
      "value": "nl-at-*********"
    },
    {
      "name": "Subscription",
      "key": "subscription",
      "desc": "Subscription provided by NimbeLink for your GCP PubSub connection.",
      "value": "org-********"
    },
    {
      "name": "Credentials",
      "key": "credentials",
      "desc": "Credentials JSON provided by NimbeLink for your GCP PubSub connection.",
      "value": "{ *** }"
    }
  ],
  "services": [
    {
      "id": "619568bd9e6e7de89a5ca2bd",
      "name": "NimbeLink - N-Link Connection ({{.projectId}})",
      "key": "{{.projectId}}_nlink",
      "modelId": "81a3ea4ff24dacd0c90691d6",
      "params": {
        "credentials": "{{.credentials}}",
        "project_id": "{{.projectId}}",
        "subscriptions": "{{.subscription}}"
      }
    }
  ],
  "triggers": [
    {
      "id": "619572e99e6e7de89a5ca2be",
      "name": "Nimbelink - Receive N-Link Event ({{.projectId}})",
      "type": "script"
      "def": "// this trigger processes raw messages from the GCP pubsub channel and formats the data in a more time-series oriented way.  It generates a generic event 'nimbelink-data' that can be received to further process the data.\r\nvar entries = {}\r\nvar deviceId = ''\r\n\r\nfunction getEntry(entries, ts) {\r\n    var existing = entries[ts.toString()]\r\n    if(!existing) {\r\n        return {key: deviceId, name: deviceId, ts: date.format(ts*1000,'rfc3339'), values: {}}\r\n    } else {\r\n        return existing\r\n    }\r\n}\r\n\r\nfunction putEntry(entries, ts, entry) {\r\n    entries[ts.toString()] = entry\r\n}\r\n\r\nfunction processDeviceStatus(obj) {\r\n  var entry = getEntry(entries, obj.ts)\r\n  entry.values.battery = obj.estBattPct\r\n  entry.values.batteryVoltage = obj.battery\r\n  entry.values.networkTech = obj.network\r\n  entry.values.networkRssi = obj.rssi\r\n  putEntry(entries, obj.ts, entry)\r\n}\r\n\r\nfunction processLoc(obj) {\r\n  var entry = getEntry(entries, obj.ts)\r\n  entry.location = {lat: obj.lat, lon: obj.lon}\r\n  switch(obj.src) {\r\n      case 'g':\r\n        entry.values.locationFixType = 'gps'\r\n        break\r\n      case 'w':\r\n        entry.values.locationFixType = 'wifi'\r\n        break\r\n      case 'c':\r\n        entry.values.locationFixType = 'cellular'\r\n        break\r\n  }\r\n  entry.values.altitude = obj.alt\r\n  entry.values.speed = obj.speed\r\n  entry.values.heading = obj.heading\r\n  putEntry(entries, obj.ts, entry)\r\n}\r\n\r\nfunction processTemp(obj) {\r\n  var entry = getEntry(entries, obj.ts)\r\n  entry.values.temperature = obj.c\r\n  entry.values.humidity = obj.rh\r\n  putEntry(entries, obj.ts, entry)\r\n}\r\n\r\nfunction processEvents(obj) {\r\n  var entry = getEntry(entries, obj.ts)\r\n  entry.event = obj.eventName\r\n  putEntry(entries, obj.ts, entry)\r\n}\r\n\r\nfunction processInfo(obj) {\r\n  log.trace('info received', obj)\r\n}\r\n\r\nfunction processAccel(obj) {\r\n  log.trace('accel received', obj)\r\n}\r\n\r\nfunction processRecord(record) {\r\n    deviceId = record.base.id\r\n    entries = {}\r\n\r\n    record.data.deviceStatus.forEach(processDeviceStatus)\r\n    record.data.loc.forEach(processLoc)\r\n    record.data.temp.forEach(processTemp)\r\n    record.data.events.forEach(processEvents)\r\n    record.data.info.forEach(processInfo)\r\n    record.data.accel.forEach(processAccel)\r\n\r\n    for(entry in entries) {\r\n        var obj = entries[entry]\r\n        obj.values.deviceType = record.base.deviceType\r\n                obj.projectId = '{{.projectId}}'\r\n        exec.now('nimbelink-data',obj)\r\n    }\r\n}\r\n\r\nevent.data.data.records.forEach(processRecord)\r\n",
      "filterType": "gcp-pubsub-receive",
      "filterServiceId": "619568bd9e6e7de89a5ca2bd"
    }
  ]
}
