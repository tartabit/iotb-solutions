{
  "templateDef": [
    {
      "name": "Port",
      "key": "port",
      "desc": "Port assigned by Tartabit, open a support ticket to request an assigned port.",
      "value": "9999"
    }
  ],
  "services": [
    {
      "id": "6168926ad2c26ce7f6d879d3",
      "name": "Micron - Prime ATA Receiver (port {{.port}})",
      "key": "micron_prime_ata_receiver_{{.port}}",
      "modelId": "81418d0e1607815e03483843",
      "params": {
        "port": "{{.port}}"
      }
    }
  ],
  "triggers": [
    {
      "id": "61e34313b558d00d6807fb3e",
      "name": "Micron - Global Variables",
      "type": "script",
      "def": "function mapGeofence(id) {\r\n    switch(id) {\r\n        case '0':\r\n          return 'home'\r\n        case '2':\r\n            return 'office'\r\n        default:\r\n            return 'unknown'\r\n    }\r\n}\r\n",
      "filterType": "library"
    },
    {
      "id": "6168932ed2c26ce7f6d879d4",
      "name": "Micron - Send SACK (port {{.port}})",
      "type": "script",
      "def": "// turn off this trigger if your device does not expect SACK messages to be sent.\r\n\r\nvar lastComma = event.data.payload.lastIndexOf(',')\r\nvar id = event.data.payload.substr(lastComma+1,4)\r\n\r\n//log.trace('SACK', {lastComma: lastComma, id: id})\r\n\r\nudp.send('udp_receiver',event.data.remoteAddr, '+SACK:'+id+'$')\r\n",
      "filterType": "udp-receive",
      "filterServiceId": "6168926ad2c26ce7f6d879d3"
    },
    {
      "id": "61ddd7adb558d00d6807fb1c",
      "name": "Micron - Receive Events (port {{.port}})",
      "type": "script",
      "def": "\r\nif(event.data.payload.startsWith('EXPT:')) {\r\n    log.warn('error communicting with device',event.data.payload)\r\n    trigger.exit()\r\n}\r\n\r\nvar firstComma = event.data.payload.indexOf(',')\r\nvar secondComma = event.data.payload.indexOf(',', firstComma+1)\r\n\r\nvar ver = event.data.payload.substring(firstComma+1,secondComma)\r\nvar cmd = event.data.payload.substring(6,firstComma)\r\n\r\nvar obj = {}\r\n\r\nif(event.data.payload.startsWith('+ACK:GTRTO')) {\r\n    // +ACK:GTRTO,423134,352009111850124,,VBR,0015,20220124211813,0057$\r\n    var obj = convert.delimitedStringToObject(event.data.payload,'cmd||key||rto|ack|ts(timestamp,20060102150405)|seq',',')\r\n\r\n    trigger.signal('micron:'+obj.key+':'+obj.ack,{packet:event.data.payload, obj: obj})\r\n    trigger.exit()\r\n} else if(event.data.payload.startsWith('+ACK')) {\r\n    var obj = convert.delimitedStringToObject(event.data.payload,'cmd||key||ack|ts(timestamp,20060102150405)|seq',',')\r\n\r\n    trigger.signal('micron:'+obj.key+':'+obj.ack,{packet:event.data.payload, obj: obj})\r\n    trigger.exit()\r\n}\r\n\r\ntrigger.include('Micron - Global Variables')\r\n\r\nswitch(cmd) {\r\n    case 'GTDSW':\r\n    case 'GTFRI':\r\n    case 'GTNMR':\r\n    case 'GTSOS':\r\n    case 'GTGEO':\r\n    case 'GTREL':\r\n    case 'GTRTL':\r\n    case 'GTPNL':\r\n        // bolt sample: +RESP:GTFRI,423130,355154089713958,Bolt4G,0,0,0,2,1,24,0.0,248,222.5,-87.967967,41.835713,20220406025857,310,410,4126,3371A11,26,,94,20220406025904,279F$\r\n        // sample:  +RESP:GTFRI,423134,352009111891516,,0,2,1,,,,,,,,302,220,2d83,358070A,00,65,20200\r\n        // sample: +RESP:GTNMR,423134,352009111850124,,0,1,1,,,,,,,,302,220,2d83,358070A,00,55,20200101034811,000D$\r\n        // sample: +RESP:GTSOS,423134,352009111891516,,0,0,1,,,,,,,,302,220,2d83,358070A,00,100,20200101033448,002C$\r\n        // sample: +RESP:GTPNL,423134,352009111850124,,0,0,1,2.0,0.0,315,107.7,-75.635652,45.449028,20220107190214,302,220,2d83,358070A,00,52,20220107190215,001A$\r\n        // sample: +RESP:GTGEO,423134,352009111850124,,0,1,1,1.0,0.8,243,108.0,-75.635483,45.448753,20220112185621,302,220,2d83,358070A,00,100,20220112185623,018B$\r\n        \r\n        switch(ver) {\r\n            case '423130':\r\n                switch(cmd) {\r\n                    case 'GTDSW':\r\n                        obj = convert.delimitedStringToObject(event.data.payload,'cmd|ver|key||wmsWorkingMode|temp.reportType(int)|timeToWakeup(int)||||gps.accuracy(int)|gps.speed(float)|gps.heading(int)|gps.altitude(float)|gps.longitude(float)|gps.latitude(float)|gps.ts(timestamp,20060102150405)|net.mcc|net.mnc|net.lac|net.cellId||battery(int)|ts(timestamp,20060102150405)|seq',',')\r\n                        break\r\n                    case 'GTFRI':\r\n                        obj = convert.delimitedStringToObject(event.data.payload,'cmd|ver|key||temp.reportId|temp.reportType(int)|temp.deviceMove(int)|wmsWorkingMode|temp.numReports(int)|gps.accuracy(int)|gps.speed(float)|gps.heading(int)|gps.altitude(float)|gps.longitude(float)|gps.latitude(float)|gps.ts(timestamp,20060102150405)|net.mcc|net.mnc|net.lac|net.cellId|net.rssi(int)||battery(int)|ts(timestamp,20060102150405)|seq',',')\r\n                        break\r\n                    case 'GTGEO':\r\n                    case 'GTPNL':\r\n                    case 'GTNMR':\r\n                        obj = convert.delimitedStringToObject(event.data.payload,'cmd|ver|key||temp.reportId|temp.reportType(int)|wmsWorkingMode|temp.numReports(int)|gps.accuracy(int)|gps.speed(float)|gps.heading(int)|gps.altitude(float)|gps.longitude(float)|gps.latitude(float)|gps.ts(timestamp,20060102150405)|net.mcc|net.mnc|net.lac|net.cellId|net.rssi(int)||battery(int)|ts(timestamp,20060102150405)|seq',',')\r\n                        break\r\n                    case 'GTRTO':\r\n                        obj = convert.delimitedStringToObject(event.data.payload,'cmd|ver|key||temp.reportId|temp.reportType(int)|timeToWakeup(int)|wmsWorkingMode|temp.numReports(int)|gps.accuracy(int)|gps.speed(float)|gps.heading(int)|gps.altitude(float)|gps.longitude(float)|gps.latitude(float)|gps.ts(timestamp,20060102150405)|net.mcc|net.mnc|net.lac|net.cellId|net.rssi(int)||battery(int)|ts(timestamp,20060102150405)|seq',',')\r\n                        break\r\n                }\r\n\r\n                break\r\n            //case '423134':\r\n            default:\r\n                obj = convert.delimitedStringToObject(event.data.payload,'cmd|ver|key||temp.reportId|temp.reportType(int)|temp.numReports(int)|gps.accuracy(int)|gps.speed(float)|gps.heading(int)|gps.altitude(float)|gps.longitude(float)|gps.latitude(float)|gps.ts(timestamp,20060102150405)|net.mcc|net.mnc|net.lac|net.cellId||battery(int)|ts(timestamp,20060102150405)|seq',',')\r\n                break\r\n        }\r\n        switch(cmd) {\r\n            case 'GTFRI':\r\n                obj.event = 'interval'\r\n                if(obj.temp.reportType & 0x01) {\r\n                    obj.motion = true\r\n                } else {\r\n                    obj.motion = false\r\n                }\r\n                if(obj.temp.reportType & 0x02) {\r\n                    obj.charging = true\r\n                } else {\r\n                    obj.charging = false\r\n                }\r\n                if(obj.temp.reportType & 0x04) {\r\n                    obj.extPower = true\r\n                } else {\r\n                    obj.extPower = false\r\n                }\r\n                if(ver == '423130') {\r\n                    if(obj.temp.reportType & 0x08) {\r\n                        obj.flight = 'enter'\r\n                    }\r\n                    if(obj.temp.reportType & 0x10) {\r\n                        obj.flight = 'exit'\r\n                    }\r\n                    if(obj.temp.reportType & 0x20) {\r\n                        obj.corner = true\r\n                    } else {\r\n                        obj.corner = false\r\n                    }\r\n                    if(obj.temp.deviceMove) {\r\n                        if(obj.temp.deviceMove==1) {\r\n                            obj.motion = true\r\n                        } else {\r\n                            obj.motion = false\r\n                        }\r\n                    }\r\n                }\r\n                break\r\n            case 'GTGEO':\r\n                obj.geofenceId = obj.temp.reportId\r\n                obj.geofenceName = mapGeofence(obj.temp.reportId)\r\n                if(obj.temp.reportType==1) {\r\n                    obj.event = 'geofence-enter'\r\n                } else {\r\n                    obj.event = 'geofence-leave'\r\n                }\r\n                break\r\n            case 'GTNMR':\r\n                obj.event = 'motion'\r\n                if(obj.temp.reportType==0) {\r\n                    obj.motion = false\r\n                    obj.event = 'motion-stop'\r\n                } else {\r\n                    obj.motion = true\r\n                    obj.event = 'motion-start'\r\n                }\r\n                break\r\n            case 'GTREL':\r\n                obj.event = 'repo'\r\n                break\r\n            case 'GTRTL':\r\n                obj.event = 'real-time'\r\n                break\r\n            case 'GTSOS':\r\n                obj.event = 'sos'\r\n                break\r\n            case 'GTPNL':\r\n                obj.event = 'power-on'\r\n        }\r\n        if(obj.wmsWorkingMode) {\r\n            switch(obj.wmsWorkingMode) {\r\n                case '0':\r\n                    obj.wmsWorkingMode = 'normal'\r\n                    break\r\n                case '1':\r\n                    obj.wmsWorkingMode = 'eco'\r\n                    break\r\n                case '2':\r\n                    obj.wmsWorkingMode = 'parking'\r\n                    break\r\n                case '3':\r\n                    obj.wmsWorkingMode = 'pursuit'\r\n                    break\r\n                case '4':\r\n                    obj.wmsWorkingMode = 'flight'\r\n                    break\r\n                case '5':\r\n                    obj.wmsWorkingMode = 'log'\r\n                    break\r\n            }\r\n        }\r\n        break\r\n    case 'GTBAT':\r\n        // sample: +RESP:GTBAT,423134,352009111849894,,0,,49,3.81,0,5,20220107190148,0266$\r\n        //         +BUFF:GTBAT,423233,352009117630405,MBoltA,0,,93,,0,1,20220301130156,0055$\r\n        switch(ver) {\r\n            case '423233':\r\n                obj = convert.delimitedStringToObject(event.data.payload,'cmd|ver|key||extPower(bool)||battery(int)||batteryVoltage(float)|charging(boolean)|led|ts(timestamp,20060102150405)|seq',',')\r\n                break\r\n            default:\r\n                obj = convert.delimitedStringToObject(event.data.payload,'cmd|ver|key||extPower(bool)||battery(int)|batteryVoltage(float)|charging(boolean)|led|ts(timestamp,20060102150405)|seq',',')\r\n                break\r\n        }\r\n        obj.event = 'battery'\r\n        break\r\n    case 'GTBLE':\r\n        // sample: +RESP:GTBLE,423134,352009111850124,,-75.635335,45.448773,20220120115712,2,,50765cb7d9ea4e2199a4fa879613a492,3e0d,028e,447c0abd4d62,-37,,43616c6c506173734254e2318fb17214,,,e2318fb17214,-55,,,,,90,20220120115719,0744$\r\n        obj = convert.delimitedStringToObject(event.data.payload,'cmd|ver|key||gps.longitude(float)|gps.latitude(float)|gps.ts(timestamp,20060102150405)|ble(array,6)||uuid|major|minor|mac|rssi(int)|||||battery(int)|ts(timestamp,20060102150405)|seq',',')\r\n        obj.event = 'ble'\r\n        break\r\n    case 'GTBLER':\r\n        // sample: +RESP:GTBLER,423134,352009111850124,,-75.635397,45.448760,20220120120324,,,,,,,,,92,20220120120331,0755$\r\n        //         +RESP:GTBLER,423134,352009111850124,,-75.635425,45.448878,20220120141730,#,m,d,,,,,,100,20220120141737,0792$\r\n        obj = convert.delimitedStringToObject(event.data.payload,'cmd|ver|key||gps.longitude(float)|gps.latitude(float)|gps.ts(timestamp,20060102150405)|mac1|data1|mac2|data2|||||battery(int)|ts(timestamp,20060102150405)|seq',',')\r\n        obj.event = 'ble-raw'\r\n        break\r\n    case 'GTBPL':\r\n        // sample: +BUFF:GTBPL,423134,352009111891516,,3.60,1.0,0.0,176,85.2,-75.635305,45.448752,20211213225105,302,220,2d83,358070A,,,10,20211214092536,049D$\r\n        obj = convert.delimitedStringToObject(event.data.payload,'cmd|ver|key||batteryVoltage(float)|gps.accuracy(int)|gps.speed(float)|gps.heading(int)|gps.altitude(float)|gps.longitude(float)|gps.latitude(float)|gps.ts(timestamp,20060102150405)|net.mcc|net.mnc|net.lac|net.cellId||ts(timestamp,20060102150405)|seq',',')\r\n        obj.event = 'battery-low'\r\n        break\r\n    case 'GTBTC':\r\n    case 'GTEPN':\r\n    case 'GTEPF':\r\n        // sample: +RESP:GTBTC,423134,352009111891516,,,,,,,,,,,,,,,1,20211215195034,0003$\r\n        // sample: +RESP:GTBTC,423134,352009111849894,,1.0,1.3,118,88.5,-75.635315,45.448743,20220119135317,302,220,2d83,358070A,,20220119135325,0A2C$\r\n        // sample: +RESP:GTEPF,423134,352009111891516,,,,,,,,,,,,,,20211215195034,0004$\r\n        obj = convert.delimitedStringToObject(event.data.payload,'cmd|ver|key||gps.accuracy(int)|gps.speed(float)|gps.heading(int)|gps.altitude(float)|gps.longitude(float)|gps.latitude(float)|gps.ts(timestamp,20060102150405)|net.mcc|net.mnc|net.lac|net.cellId||ts(timestamp,20060102150405)|seq',',')\r\n        switch(cmd) {\r\n            case 'GTBTC':\r\n                obj.event = 'charging-start'\r\n                break\r\n            case 'GTEPN':\r\n                obj.event = 'external-power-on'\r\n                break\r\n            case 'GTEPF':\r\n                obj.event = 'external-power-off'\r\n                break\r\n        } \r\n        break\r\n    case 'GTCID':\r\n        // sample: +RESP:GTCID,423134,352009111850124,,89883070000011234034,20220209222605,10FE$\r\n        obj = convert.delimitedStringToObject(event.data.payload,'cmd|ver|key||iccid|ts(timestamp,20060102150405)|seq',',')\r\n        obj.event = 'rto-cid'\r\n        break\r\n    case 'GTCSQ':\r\n        // sample: +RESP:GTCSQ,423134,352009111850124,,18,4,20220209220208,10A2$\r\n        obj = convert.delimitedStringToObject(event.data.payload,'cmd|ver|key||net.csq(int)|net.ber(int)|ts(timestamp,20060102150405)|seq',',')\r\n        obj.event = 'rto-csq'\r\n        obj.net.rssi = -113 + obj.net.csq*2\r\n        break\r\n    case 'GTINF':\r\n        // sample: +RESP:GTINF,423134,352009111850124,,42,89883070000011234034,18,4,0,,FF,,,4.09,0,5,2,0,0,20220209223950,97,,,,,20220209224003,1116$\r\n        // sample: +RESP:GTINF,423134,352009111850124,,42,89883070000011234034,18,4,0,,FF,,,4.09,0,5,2,0,0,20220209223950,97,,,,,20220209224003,1116$\r\n        obj = convert.delimitedStringToObject(event.data.payload,'cmd|ver|key||temp.state(int)|iccid|net.csq(int)|net.ber(int)|extPower(bool)|bleSensorMac|temp(float)|hum(float)||batteryVoltage(float)|charging(bool)|||||gps.ts(timestamp,20060102150405)|battery(int)|||||ts(timestamp,20060102150405)|seq',',')\r\n        switch(obj.temp.state) {\r\n            case '21':\r\n                obj.ignition = true\r\n                obj.motion = false\r\n                break\r\n            case '22':\r\n                obj.ignition = true\r\n                obj.motion = true\r\n                break\r\n            case '41':\r\n                obj.ignition = false\r\n                obj.motion = false\r\n                break\r\n            case '42':\r\n                obj.ignition = false\r\n                obj.motion = true\r\n                break\r\n        }\r\n        obj.event = 'info'\r\n        obj.net.rssi = -113 + obj.net.csq*2\r\n        break\r\n    case 'GTPDP':\r\n    case 'GTPFA':\r\n    case 'GTPNA':\r\n        // sample: +BUFF:GTPFA,423134,352009111891516,,20211214104915,04BE$\r\n        // sample: +RESP:GTPDP,423134,352009111891516,,20211203202615,015D$\r\n        obj = convert.delimitedStringToObject(event.data.payload,'cmd|ver|key||ts(timestamp,20060102150405)|seq',',')\r\n        switch(cmd) {\r\n            case 'GTPDP':\r\n                obj.event = 'pdp-activated'\r\n                break\r\n            case 'GTPFA':\r\n                obj.event = 'power-off'\r\n                break\r\n            case 'GTPNA':\r\n                obj.event = 'power-on'\r\n                break\r\n        }    \r\n        break\r\n    case 'GTSTC':\r\n        // sample: +RESP:GTSTC,423134,352009111850124,,,1.0,0.0,228,92.6,-75.635503,45.448750,20220113220539,302,220,2d83,358070A,,20220114161456,0289$\r\n        obj = convert.delimitedStringToObject(event.data.payload,'cmd|ver|key|||gps.accuracy(int)|gps.speed(float)|gps.heading(int)|gps.altitude(float)|gps.longitude(float)|gps.latitude(float)|gps.ts(timestamp,20060102150405)|net.mcc|net.mnc|net.lac|net.cellId||ts(timestamp,20060102150405)|seq',',')\r\n        obj.event = 'charging-stop'\r\n        break\r\n    case 'GTSTT':\r\n        // sample: +RESP:GTSTT,423134,352009111891516,,41,,,,,,,,302,220,2d83,358070A,,,75,20200101013014,0011$\r\n        obj = convert.delimitedStringToObject(event.data.payload,'cmd|ver|key||temp.state|gps.accuracy(int)|gps.speed(float)|gps.heading(int)|gps.altitude(float)|gps.longitude(float)|gps.latitude(float)|gps.ts(timestamp,20060102150405)|net.mcc|net.mnc|net.lac|net.cellId||ts(timestamp,20060102150405)|seq',',')\r\n        obj.event = 'motion-event'\r\n        switch(obj.temp.state) {\r\n            case '21':\r\n                obj.ignition = true\r\n                obj.motion = false\r\n                break\r\n            case '22':\r\n                obj.ignition = true\r\n                obj.motion = true\r\n                break\r\n            case '41':\r\n                obj.ignition = false\r\n                obj.motion = false\r\n                break\r\n            case '42':\r\n                obj.ignition = false\r\n                obj.motion = true\r\n                break\r\n        }\r\n        break\r\n    case 'GTTMP':\r\n        // sample: +RESP:GTTMP,423134,352009111850124,,1,ac233fa231b9,21.7,1,1.0,0.0,136,109.0,-75.635338,45.448828,20220120142030,302,220,2d83,358070A,00,31,100,20220120142037,0798$\r\n        obj = convert.delimitedStringToObject(event.data.payload,'cmd|ver|key||temp.state(int)|mac|temp(float)||gps.accuracy(int)|gps.speed(float)|gps.heading(int)|gps.altitude(float)|gps.longitude(float)|gps.latitude(float)|gps.ts(timestamp,20060102150405)|net.mcc|net.mnc|net.lac|net.cellId|||battery(int)|ts(timestamp,20060102150405)|seq',',')\r\n        switch(temp.state) {\r\n            case 1:\r\n                obj.event = 'temperature-high'\r\n                break\r\n            case 2:\r\n                obj.event = 'temperature-low'\r\n                break\r\n            default:\r\n                obj.event = 'temperature'\r\n                break\r\n        }\r\n        break\r\n    case 'GTWIF':\r\n        // sample: +RESP:GTWIF,423134,352009111849894,,3,b0bbe55f038e,-84,,,,38b1db7f4c79,-88,,,,8020da0f4052,-88,,,,,,,,35,20220111194151,0381$\r\n        switch(ver) {\r\n            case '423130':\r\n                obj = convert.delimitedStringToObject(event.data.payload,'cmd|ver|key|||aps(array,5)|bssid|rssi(int)|ssid|||net.mcc|net.mnc|net.lac|net.cellId|||battery(int)|ts(timestamp,20060102150405)|seq',',')\r\n                break\r\n            default:\r\n                obj = convert.delimitedStringToObject(event.data.payload,'cmd|ver|key||aps(array,5)|bssid|rssi(int)||||||||battery(int)|ts(timestamp,20060102150405)|seq',',')\r\n                break\r\n        }\r\n        obj.event = 'wifi'\r\n        break\r\n    default:\r\n        log.warn('no decoder for '+cmd,event.data.payload)\r\n}\r\n\r\nif(obj.gps) {\r\n  var gpsTs = date.parse(obj.gps.ts,'rfc3339')\r\n  var repTs = date.parse(obj.ts,'rfc3339')\r\n  obj.gps.age = (repTs - gpsTs)/1000\r\n}\r\n\r\ncache.set('micron:addr:'+obj.key, JSON.stringify({listener: event.service.key, addr:event.data.remoteAddr}))\r\n\r\ndelete obj.temp\r\ndelete obj.ignored\r\n//log.trace(cmd, obj)\r\n\r\nobj.buffered = (event.data.payload.substring(1,5)=='BUFF')\r\nobj.raw = event.data.payload\r\n\r\nif(Object.keys(obj).length!=0) {\r\n  exec.now('micron-data',obj)\r\n  if(obj.event=='real-time') {\r\n      trigger.signal('micron:rtl:'+obj.key,obj)\r\n  }\r\n}",
      "filterType": "udp-receive"
    },
    {
      "id": "61ef1bd2b558d00d6807fb66",
      "name": "Micron - Commands",
      "type": "script",
      "def": "\r\nfunction send_raw_command(key, command, queueOnFailure) {\r\n    var addr = cache.get('micron:addr:'+key)\r\n    if(!addr) {\r\n        return {success: false, error: 'device address not known'}\r\n    }\r\n    addr = JSON.parse(addr)\r\n\r\n    var id = random.hex(4)\r\n\r\n    if(command.endsWith('$')) {\r\n        var lastComma = command.lastIndexOf(',')\r\n        command = command.substr(0,lastComma+1)\r\n        log.trace('trimmed command to: '+command)\r\n    }\r\n    log.trace('sent command ['+command+ id + '$] to ['+key+'] at ['+addr.addr+']')\r\n\r\n    udp.send(addr.listener,addr.addr,command+ id + '$')\r\n\r\n    var ack = trigger.wait('micron:'+event.data.deviceId+':'+id,10)\r\n\r\n    log.trace('received reply ['+JSON.stringify(ack)+'] from ['+key+'] for ['+command+ id + '$]')\r\n\r\n    if(ack) {\r\n        //log.trace('got ack', ack)\r\n        return {success: true}\r\n    } else {\r\n        //log.trace('ack timeout', ack)\r\n        if(queueOnFailure) {\r\n            //log.trace('queued', ack)\r\n            queue.put('micron:xmit:'+key,{key: key, command: command})\r\n        }\r\n        return {success: false, error: 'timeout'}\r\n    }\r\n}\r\n\r\nfunction send_command(key, command, queueOnFailure) {\r\n\r\n  var cmd = convert.delimitedStringToObject(command,'op|arg1|arg2|arg3|arg4',',')\r\n\r\n  var rsp = null\r\n  switch(cmd.op) {\r\n    case 'ble':\r\n        if(cmd.arg1==true || cmd.arg1=='true') {\r\n            rsp = send_raw_command(key, 'AT+GTBLE=AIR11,1,60,8,7,6,0,0,0,,,,,,,,,,,,,,,,,1,,,$', queueOnFailure)\r\n\r\n            \r\n        } else {\r\n            rsp = send_raw_command(key, 'AT+GTBLE=AIR11,0,60,8,7,6,0,0,0,,,,,,,,,,,,,,,,,1,,,$', queueOnFailure)\r\n        }\r\n        break\r\n    case 'cid':\r\n        rsp = send_raw_command(key, 'AT+GTRTO=AIR11,6,,,,,,,,,,,,,$', queueOnFailure)\r\n        break\r\n    case 'csq':\r\n        rsp = send_raw_command(key, 'AT+GTRTO=AIR11,7,,,,,,,,,,,,,$', queueOnFailure)\r\n        break\r\n    case 'locate':\r\n        rsp = send_raw_command(key, 'AT+GTRTO=AIR11,1,,,,,,,,,,,,,$', queueOnFailure)\r\n        break\r\n    case 'reboot':\r\n        rsp = send_raw_command(key, 'AT+GTRTO=AIR11,3,,,,,,,,,,,,,$', queueOnFailure)\r\n    case 'repo':\r\n        var mode = 0\r\n        var period = 1\r\n        var interval1 = 60\r\n        var interval2 = 60\r\n        if(cmd.arg1) {\r\n            if(cmd.arg1==true) {\r\n                mode = 1\r\n            }\r\n        }\r\n        if(cmd.arg2) {\r\n            period = +cmd.arg2\r\n        }\r\n        if(cmd.arg3) {\r\n            interval1 = +cmd.arg3\r\n        }\r\n        if(cmd.arg4) {\r\n            interval2 = +cmd.arg4\r\n        }\r\n\r\n        rsp = send_raw_command(key, 'AT+GTRTO=AIR11,12,,,,,'+mode+','+period+','+interval1+','+interval2+',,,,,$', queueOnFailure)\r\n        break\r\n    case 'vibrate':\r\n        var duration = 2\r\n        if(cmd.arg1) {\r\n            duration = +cmd.arg1\r\n        }\r\n        rsp = send_raw_command(key, 'AT+GTRTO=AIR11,10,,,,'+duration+',,,,,,,,,$', queueOnFailure)\r\n        break\r\n    case 'wifi':\r\n        rsp = send_raw_command(key, 'AT+GTRTO=AIR11,14,,,,,,,60,60,1,,,,$', queueOnFailure)\r\n        break\r\n    default:\r\n        rsp = {success: false, error: 'command not found'}\r\n        break\r\n  }\r\n  return rsp\r\n}",
      "filterType": "library"
    },
    {
      "id": "61ef1cbbb558d00d6807fb67",
      "name": "Micron - Flush Command Queue",
      "type": "script",
      "def": "var obj = convert.delimitedStringToObject(event.data.payload,'cmd|ver|key',',')\r\n\r\nvar loaded = false\r\nvar first = false\r\n\r\nwhile(1) {\r\n    var rto = queue.get('micron:xmit:'+obj.key)\r\n    if(!rto) {\r\n        //if(first) {\r\n        //    log.trace('done flushing', rto)\r\n        //}\r\n        break\r\n    } else {\r\n        //log.trace('flushing', rto)\r\n        first = true\r\n        if(!loaded) {\r\n            loaded = true\r\n            trigger.include('Micron - Commands')\r\n        }\r\n        send_raw_command(obj.key, rto.command, false)\r\n    }\r\n}\r\n",
      "filterType": "udp-receive"
    }
  ]
}
