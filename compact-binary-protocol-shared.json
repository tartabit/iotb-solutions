{
  "services": [
    {
      "id": "689cd8cf000d74e17495378d",
      "key": "compact-udp-server",
      "modelId": "81418d0e1607815e03483843",
      "name": "Compact UDP Protocol Server",
      "params": {
        "extractor": "custom",
        "extractor_config": "{\"delim\": \",\", \"index\": 0, \"length\":15, \"path\":\"imei\", \"prefix\": \"\", \"format\":\"compact-binary\"}",
        "port": "9110",
        "send_events": "true"
      }
    },
    {
      "id": "689cd7fd000d74e17495378a",
      "key": "customer_settings",
      "modelId": "81471998fa4d9552100f05e2",
      "name": "Customer Settings"
    }
  ],
  "triggerGlobals": [
    {
      "isSecret": false,
      "key": "defaultConfig",
      "value": {
        "readingInterval": 60,
        "reportingInterval": 120,
        "server": ""
      }
    }
  ],
  "triggers": [
    {
      "def": "var debug = false\r\n\r\nfunction configGetDesired(ep) {\r\n    var desiredConfig = endpoint.storageGet(ep.key, 'desired-config')\r\n    if (!desiredConfig) {\r\n        if (ep.tags && ep.tags.customer) {\r\n            var configEndpoint = endpoint.searchOne('key==\"' + ep.tags.customer + '\"')\r\n            if (configEndpoint && configEndpoint.endpoint) {\r\n                if (configEndpoint.endpoint.statusDetails) {\r\n                    desiredConfig = {\r\n                        reportingInterval: +configEndpoint.endpoint.statusDetails.reportingInterval || +global.values.defaultConfig.reportingInterval,\r\n                        readingInterval: +configEndpoint.endpoint.statusDetails.readingInterval || +global.values.defaultConfig.readingInterval,\r\n                        server: configEndpoint.endpoint.statusDetails.server || global.values.defaultConfig.server,\r\n                        source: 'account'\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (!desiredConfig) {\r\n            desiredConfig = {\r\n                reportingInterval: +global.values.defaultConfig.reportingInterval,\r\n                readingInterval: +global.values.defaultConfig.readingInterval,\r\n                server: global.values.defaultConfig.server,\r\n                source: 'global'\r\n            }\r\n        }\r\n    } else {\r\n        desiredConfig.source = 'endpoint'\r\n    }\r\n    log.trace('returning desired config', desiredConfig)\r\n    return desiredConfig\r\n}\r\n\r\nfunction configSetDesired(ep, config) {\r\n    var desiredConfig = configGetDesired(ep)\r\n\r\n    if (!config) return\r\n\r\n    if (config.server) {\r\n        desiredConfig.server = config.server\r\n    }\r\n    if (config.reportingInterval) {\r\n        desiredConfig.reportingInterval = config.reportingInterval\r\n    }\r\n    if (config.readingInterval) {\r\n        desiredConfig.readingInterval = config.readingInterval\r\n    }\r\n\r\n    log.trace('set desired config', desiredConfig)\r\n\r\n    endpoint.storageSet(ep.key, 'desired-config', desiredConfig)\r\n}\r\n\r\n\r\n\r\nfunction configNeeded(ep, desiredConfig, config) {\r\n    if (!config) {\r\n        config = endpoint.storageGet(ep.key, 'latest-config')\r\n    }\r\n\r\n    if (!config) {\r\n        log.trace('checking if config is needed: yes', {reason: 'no known config'})\r\n        return true\r\n    }\r\n\r\n    if ( (desiredConfig.server=='' || config.server == desiredConfig.server) &&\r\n        config.reportingInterval == desiredConfig.reportingInterval &&\r\n        config.readingInterval == desiredConfig.readingInterval) {\r\n        if (event.endpoint.tags.config == 'update-in-progress') {\r\n            log.trace('configuration update complete')\r\n        }\r\n        if (ep.tags.config && ep.tags.config != 'up-to-date') {\r\n            endpoint.updateTags(ep.key, { config: 'up-to-date' }, null)\r\n        }\r\n        log.trace('checking if config is needed: no', {reason: 'configs match'})\r\n        return false\r\n    } else {\r\n        if (ep.tags.config && ep.tags.config != 'update-needed') {\r\n            endpoint.updateTags(ep.key, { config: 'update-needed' }, null)\r\n            log.trace('configuration update needed')\r\n        }\r\n        log.trace('checking if config is needed: yes', {reason: 'mismatch in parameters', desired:desiredConfig, config:config})\r\n        return true\r\n    }\r\n}\r\n",
      "filterType": "library",
      "id": "689e35b1680def24ee5f0a86",
      "name": "Compact UDP Protocol - Library",
      "type": "script"
    },
    {
      "def": "var sd = {}\r\n\r\nif (event.data.data.accountId) {\r\n    sd.accountId = event.data.data.accountId\r\n}\r\nif (event.data.data.reportingInterval) {\r\n    sd.reportingInterval = '' + event.data.data.reportingInterval\r\n}\r\nif (event.data.data.readingInterval) {\r\n    sd.readingInterval = '' + event.data.data.readingInterval\r\n}\r\nif (event.data.data.server) {\r\n    sd.server = '' + event.data.data.server\r\n}\r\n\r\nendpoint.update(event.endpoint.key, { statusDetails: sd })",
      "filterGeneric": "configure-account",
      "filterType": "generic",
      "genericSample": "{\n  \"form\": true,\n   \"title\": \"Set Account parameters\",\n   \"desc\": \"Set account details\",\n   \"icon\": \"mdi-cog-outline\",\n   \"endpoint\":{ \"required\": true },\n   \"serviceKey\": \"customer_settings\",\n   \"fields\": [\n      { \"name\": \"Server\", \"key\": \"server\", \"type\":\"string\"},\n      { \"name\": \"Reporting Interval\", \"key\": \"reportingInterval\", \"type\":\"string\"},\n      { \"name\": \"Reading Interval\", \"key\": \"readingInterval\", \"type\":\"string\"},\n      { \"name\": \"AccountId\", \"key\": \"accountId\", \"type\":\"string\"}\n   ]\n}",
      "id": "689d5ec1680def24ee5eed56",
      "name": "Compact UDP Protocol - Endpoint Action - Set Account Parameters",
      "type": "script"
    },
    {
      "def": "endpoint.updateTags(event.endpoint.key, { config:'report'},null)",
      "filterGeneric": "request-config",
      "filterType": "generic",
      "genericSample": "{\n  \"form\": true,\n   \"title\": \"Request device configuration\",\n   \"desc\": \"Request device configuration\",\n   \"icon\": \"mdi-cog-outline\",\n   \"endpoint\":{ \"required\": true },\n   \"serviceKey\": \"compact-udp-server\"\n}",
      "id": "689cd8e5000d74e17495378f",
      "name": "Compact UDP Protocol - Endpoint Action - Request Config",
      "type": "script"
    },
    {
      "def": "\r\ntrigger.include('Compact UDP Protocol - Library')\r\n\r\nconfigSetDesired(event.endpoint, event.data.data)\r\n",
      "filterGeneric": "reconfigure",
      "filterType": "generic",
      "genericSample": "{\n  \"form\": true,\n   \"title\": \"Reconfigure device\",\n   \"desc\": \"Reconfigure device\",\n   \"icon\": \"mdi-cog-outline\",\n   \"endpoint\":{ \"required\": true },\n   \"serviceKey\": \"compact-udp-server\",\n   \"fields\": [\n      { \"name\": \"Server\", \"key\": \"server\", \"type\":\"string\"},\n      { \"name\": \"Reporting Interval\", \"key\": \"reportingInterval\", \"type\":\"number\"},\n      { \"name\": \"Reading Interval\", \"key\": \"readingInterval\", \"type\":\"number\"}\n   ]\n}",
      "id": "689cd8e5000d74e17495378e",
      "name": "Compact UDP Protocol - Endpoint Action - Reconfigure",
      "rateLimit": {
        "scope": "none",
        "unit": "minute"
      },
      "type": "script"
    },
    {
      "def": "\r\ntrigger.include('Compact UDP Protocol - Library')\r\n\r\nvar reader = new convert.binReader(event.data.payload)\r\n\r\nfunction readVLString(reader) {\r\n    var vlen = reader.readUint8()\r\n    if(vlen==0) return\r\n    return reader.readString(vlen)\r\n}\r\n\r\nfunction rssiToCategory(rssi) {\r\n  if (rssi >= -65) {\r\n    return \"great\";\r\n  } else if (rssi >= -75) {\r\n    return \"good\";\r\n  } else if (rssi >= -85) {\r\n    return \"fair\";\r\n  } else {\r\n    return \"poor\";\r\n  }\r\n}\r\n\r\nfunction readLocation(reader, pkt) {\r\n    var locType = reader.readUint8()\r\n    switch (locType) {\r\n        case 1: // gnss\r\n            pkt.loc = {\r\n                source: 'gnss',\r\n                lat: reader.readFloat32(),\r\n                lng: reader.readFloat32()\r\n            }\r\n            break\r\n        case 2: // cell\r\n            // get cell location\r\n            var cell = {\r\n                mcc: +readVLString(reader),\r\n                mnc: +readVLString(reader),\r\n                cells: [\r\n                    { lacHex: readVLString(reader), cellIdHex: readVLString(reader), rssi: reader.readInt8() }\r\n                ]\r\n            }\r\n            try {\r\n                var loc = location.geolocate('cell-location', cell)\r\n                log.trace('error',loc)\r\n                pkt.loc = {\r\n                    source: 'cell',\r\n                    lat: loc.lat,\r\n                    lng: loc.lon\r\n                }\r\n            } catch (e) {\r\n                log.warn('failed to geolocate device: '+e)\r\n            }\r\n            break\r\n\r\n    }\r\n}\r\n\r\nfunction readSensorData(reader, pkt) {\r\n    var sensorDataCount = reader.readUint8()\r\n    for (var i = 0; i < sensorDataCount; i++) {\r\n        var sd = {\r\n            sensor_type: reader.readUint8(),\r\n            sensor_version: reader.readUint8(),\r\n            sensor_length: reader.readUint8(),\r\n            values: {}\r\n        }\r\n\r\n        switch (sd.sensor_type) {\r\n            case 2:\r\n                sd.sensor_desc = 'multi-sensor'\r\n                // multi-sensor\r\n                sd.values.battery = reader.readUint8()\r\n                var rssi = reader.readInt8()\r\n                if (rssi <= 0) {\r\n                    sd.values.rssi = -113;\r\n                } else if (rssi >= 31) {\r\n                    sd.values.rssi = -51;\r\n                } else {\r\n                    sd.values.rssi = (rssi * 2) - 113;\r\n                }\r\n\r\n                var first_ts = reader.readUint32() * 1000\r\n                var interval = reader.readUint16()\r\n\r\n                sd.values.readings = []\r\n                var record_count = reader.readUint8()\r\n                for (var i = 0; i < record_count; i++) {\r\n                    sd.values.readings.push({ ts: new Date(first_ts + (interval * i * 1000)), temperature: reader.readUint16() / 10.0, humidity: reader.readUint16() / 10.0 })\r\n                }\r\n                endpoint.update(event.endpoint.key, {\r\n                    addTags: {\r\n                        signalQuality: rssiToCategory(sd.values.rssi)\r\n                    },\r\n                    statusDetails: {\r\n                        rssi: sd.values.rssi,\r\n                        battery: Math.round(sd.values.battery / 10) * 10,\r\n                    }\r\n                })\r\n                pkt.sensors['multiSensor'] = sd\r\n                break\r\n            case 3:\r\n                sd.sensor_desc = 'step-counter'\r\n                sd.values.battery = reader.readUint8()\r\n                var rssi = reader.readInt8()\r\n                if (rssi <= 0) {\r\n                    sd.values.rssi = -113;\r\n                } else if (rssi >= 31) {\r\n                    sd.values.rssi = -51;\r\n                } else {\r\n                    sd.values.rssi = (rssi * 2) - 113;\r\n                }\r\n                sd.values.steps = reader.readUint32()\r\n                pkt.sensors['stepCounter'] = sd\r\n            default:\r\n        }\r\n        var addTags = {}\r\n        var statusDetails = {}\r\n        if (sd.values.rssi) {\r\n            addTags.signalQuality = rssiToCategory(sd.values.rssi)\r\n            statusDetails.rssi = sd.values.rssi\r\n        }\r\n        if (sd.values.battery) {\r\n            statusDetails.battery = Math.round(sd.values.battery / 10) * 10\r\n        }\r\n        endpoint.update(event.endpoint.key, {\r\n            addTags: addTags,\r\n            statusDetails: statusDetails\r\n        })\r\n    }\r\n}\r\n\r\nvar desiredConfig = configGetDesired(event.endpoint)\r\nvar requestConfig = false\r\n\r\nvar pkt = {\r\n    ver: reader.readUint8(),\r\n    cmd: reader.readString(2),\r\n    txnId: reader.readUint16(),\r\n    imei: convert.binToHex(reader.readBytes(8)),\r\n    values: {},\r\n}\r\n\r\nif (pkt.imei[0] == '0') {\r\n    pkt.imei = pkt.imei.substring(1)\r\n}\r\n\r\nswitch (pkt.cmd) {\r\n    case 'T':\r\n        pkt.desc = 'telemetry'\r\n        pkt.ts = new Date(reader.readUint32() * 1000)\r\n        pkt.sensors = {}\r\n\r\n        readLocation(reader, pkt)\r\n\r\n        readSensorData(reader, pkt)\r\n        \r\n        endpoint.storageSet(event.endpoint.key, 'latest-' + pkt.desc, {\r\n            ts: pkt.ts,\r\n            loc: pkt.loc,\r\n            sensors: pkt.sensors,\r\n        })\r\n        requestConfig = configNeeded(event.endpoint, desiredConfig, undefined)\r\n        break\r\n    case 'M+':\r\n        pkt.desc = 'motion-start'\r\n        pkt.ts = new Date(reader.readUint32() * 1000)\r\n        pkt.sensors = {}\r\n\r\n        readLocation(reader, pkt)\r\n        \r\n        readSensorData(reader, pkt)\r\n        \r\n        endpoint.storageSet(event.endpoint.key, 'latest-' + pkt.desc, {\r\n            ts: pkt.ts,\r\n            loc: pkt.loc,\r\n            values: pkt.values,\r\n            sensor_type: pkt.sensor_type,\r\n            sensor_version: pkt.sensor_version,\r\n        })\r\n        endpoint.storageSet(event.endpoint.key, 'latest-' + pkt.desc, {\r\n            ts: pkt.ts,\r\n            loc: pkt.loc,\r\n            sensors: pkt.sensors,\r\n        })\r\n        requestConfig = configNeeded(event.endpoint, desiredConfig, undefined)\r\n        break\r\n    case 'M-':\r\n        pkt.desc = 'motion-stop'\r\n        pkt.ts = new Date(reader.readUint32() * 1000)\r\n        pkt.sensors = {}\r\n\r\n        readLocation(reader, pkt)\r\n        \r\n        readSensorData(reader, pkt)\r\n        \r\n        endpoint.storageSet(event.endpoint.key, 'latest-' + pkt.desc, {\r\n            ts: pkt.ts,\r\n            loc: pkt.loc,\r\n            sensors: pkt.sensors,\r\n        })\r\n        requestConfig = configNeeded(event.endpoint, desiredConfig, undefined)\r\n        break\r\n    case 'C':\r\n        pkt.desc = 'config'\r\n        pkt.values.server = readVLString(reader)\r\n        pkt.values.reportingInterval = reader.readUint32()\r\n        pkt.values.readingInterval = reader.readUint32()\r\n        pkt.values.updated = event.ts\r\n        requestConfig = configNeeded(event.endpoint, desiredConfig, pkt.values)\r\n        endpoint.storageSet(event.endpoint.key, 'latest-config', pkt.values)\r\n        break\r\n    case 'U-':\r\n        pkt.desc = 'update-status'\r\n        pkt.values.component = readVLString(reader)\r\n        pkt.values.status = readVLString(reader)\r\n        pkt.values.result = readVLString(reader)\r\n    case 'P+':\r\n        pkt.desc = 'power-on'\r\n        var customer_id_len = reader.readUint8()\r\n        pkt.values.customer_id = convert.binToHex(reader.readBytes(customer_id_len))\r\n        pkt.values.software_version = readVLString(reader)\r\n        pkt.values.modem_version = readVLString(reader)\r\n\r\n        var mcc = readVLString(reader)\r\n        var mnc = readVLString(reader)\r\n        try {\r\n            var net = network.decodeMccMnc(mcc, mnc)\r\n            pkt.values.country = net.country\r\n            pkt.values.operator = net.operator\r\n        } catch (e) {\r\n            pkt.values.country = 'unknown'\r\n            pkt.values.operator = 'unknown'\r\n        }\r\n        pkt.values.radioTech = readVLString(reader)\r\n\r\n        endpoint.updateTags(event.endpoint.key, {\r\n            verSoftware: pkt.values.software_version,\r\n            verModem: pkt.values.modem_version,\r\n            customer: pkt.values.customer_id,\r\n            country: pkt.values.country,\r\n            operator: pkt.values.operator,\r\n            radioTech: pkt.values.radioTech,\r\n        }, null)\r\n\r\n        endpoint.storageSet(event.endpoint.key, 'latest-' + pkt.desc, pkt.values)\r\n        break\r\n    default:\r\n        pkt.desc = 'unknown'\r\n        break\r\n}\r\n\r\n// send ack\r\nvar writer = convert.binWriter()\r\nwriter.writeUint8(0x01)\r\nif (pkt.desc == 'config' && requestConfig) {\r\n    writer.writeUint8(0x57)\r\n} else if (requestConfig || event.endpoint.tags.config == 'report') {\r\n    // request configuration from device\r\n    writer.writeUint8(0x43)\r\n} else {\r\n    // simple ack, no further action needed\r\n    writer.writeUint8(0x41)\r\n}\r\nwriter.writeUint8(0x00)\r\nwriter.writeUint16(pkt.txnId)\r\nif (pkt.desc == 'config' && requestConfig) {\r\n    writer.writeUint8(desiredConfig.server.length)\r\n    writer.writeString(desiredConfig.server)\r\n    writer.writeUint32(desiredConfig.reportingInterval)\r\n    writer.writeUint32(desiredConfig.readingInterval)\r\n    endpoint.updateTags(event.endpoint.key, { config: 'update-in-progress' }, null)\r\n    log.trace('sent configuration update', desiredConfig)\r\n}\r\n\r\nudp.send(event.service.key, event.data.remoteAddr, writer.getBytes())\r\n\r\nexec.now('decoded-' + pkt.desc, pkt)\r\n\r\n",
      "filterServiceId": "689cd8cf000d74e17495378d",
      "filterType": "udp-receive",
      "id": "689cd8e5000d74e174953794",
      "name": "Compact UDP Protocol - Decode",
      "rateLimit": {
        "scope": "none",
        "unit": "minute"
      },
      "type": "script"
    }
  ],
  "dashboards": [
    {
      "id": "68a3293a000d74e1749537cb",
      "name": "Device Overview",
      "scope": "account",
      "view": {
        "layout": [
          {
            "h": 3,
            "i": "widget-1755523293306",
            "moved": false,
            "static": false,
            "w": 4,
            "x": 0,
            "y": 0
          },
          {
            "h": 3,
            "i": "widget-1755523293306-copy",
            "moved": false,
            "static": false,
            "w": 4,
            "x": 4,
            "y": 0
          },
          {
            "h": 3,
            "i": "widget-1755523293306-copy-copy",
            "moved": false,
            "static": false,
            "w": 4,
            "x": 4,
            "y": 6
          },
          {
            "h": 3,
            "i": "widget-1755523293306-copy-copy-copy",
            "moved": false,
            "static": false,
            "w": 4,
            "x": 0,
            "y": 6
          },
          {
            "h": 6,
            "i": "widget-1755523394373",
            "moved": false,
            "static": false,
            "w": 4,
            "x": 8,
            "y": 0
          },
          {
            "h": 3,
            "i": "widget-1755524262521",
            "moved": false,
            "static": false,
            "w": 4,
            "x": 0,
            "y": 3
          },
          {
            "h": 3,
            "i": "widget-1755524358986",
            "moved": false,
            "static": false,
            "w": 4,
            "x": 4,
            "y": 3
          }
        ]
      },
      "widgets": {
        "widget-1755523293306": {
          "config": {
            "chartType": "pie",
            "field": "tags.customer",
            "fieldType": "string",
            "query": "",
            "ranges": [],
            "showUnknown": false,
            "tags": [],
            "title": "Devices by Customer"
          },
          "id": "widget-1755523293306",
          "type": "endpoint-fields"
        },
        "widget-1755523293306-copy": {
          "config": {
            "chartType": "pie",
            "field": "tags.radioTech",
            "fieldType": "string",
            "query": "",
            "ranges": [],
            "showUnknown": false,
            "tags": [],
            "title": "Devices by Ratio Technology"
          },
          "id": "widget-1755523316025",
          "type": "endpoint-fields"
        },
        "widget-1755523293306-copy-copy": {
          "config": {
            "chartType": "pie",
            "field": "tags.verModem",
            "fieldType": "string",
            "query": "",
            "ranges": [],
            "showUnknown": false,
            "tags": [],
            "title": "Devices by Modem Version"
          },
          "id": "widget-1755523330658",
          "type": "endpoint-fields"
        },
        "widget-1755523293306-copy-copy-copy": {
          "config": {
            "chartType": "pie",
            "field": "tags.verSoftware",
            "fieldType": "string",
            "query": "",
            "ranges": [],
            "showUnknown": false,
            "tags": [],
            "title": "Devices by Software Version"
          },
          "id": "widget-1755523361386",
          "type": "endpoint-fields"
        },
        "widget-1755523394373": {
          "config": {
            "clusterMode": "none",
            "limit": 200,
            "precision": 3,
            "query": "",
            "title": "Device Locations"
          },
          "id": "widget-1755523394373",
          "type": "track-map"
        },
        "widget-1755524262521": {
          "config": {
            "chartType": "pie",
            "field": "statusDetails.battery",
            "fieldType": "number",
            "query": "serviceId==\"689cd8cf000d74e17495378d\"",
            "ranges": [
              {
                "label": "low",
                "max": "25",
                "min": 0
              },
              {
                "label": "fair",
                "max": "50",
                "min": "25"
              },
              {
                "label": "good",
                "max": "75",
                "min": "50"
              },
              {
                "label": "great",
                "max": "101",
                "min": "75"
              }
            ],
            "showUnknown": false,
            "tags": [],
            "title": "Device Battery Levels"
          },
          "id": "widget-1755524262521",
          "type": "endpoint-fields"
        },
        "widget-1755524358986": {
          "config": {
            "chartType": "pie",
            "field": "tags.signalQuality",
            "fieldType": "string",
            "query": "",
            "ranges": [],
            "showUnknown": false,
            "tags": [],
            "title": "Devices by RSSI"
          },
          "id": "widget-1755524358986",
          "type": "endpoint-fields"
        }
      }
    }
  ]
}