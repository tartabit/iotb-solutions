{
  "services": [
    {
      "id": "689cd8cf000d74e17495378d",
      "key": "compact-udp-server",
      "modelId": "81418d0e1607815e03483843",
      "name": "Compact UDP Protocol Server",
      "params": {
        "extractor": "custom",
        "extractor_config": "{\"delim\": \",\", \"index\": 0, \"length\":15, \"path\":\"imei\", \"prefix\": \"\", \"format\":\"compact-binary\"}",
        "port": "9110",
        "send_events": "true"
      }
    }
  ],
  "triggerGlobals": [
    {
      "isSecret": false,
      "key": "initializeDesiredConfig",
      "value": "false"
    }
  ],
  "triggers": [
    {
      "def": "var debug = false\n\nfunction configGetDesired(ep) {\n    var desiredConfig = endpoint.storageGet(ep.key, 'desired-config')\n    if (!desiredConfig) {\n        if(global.values.initializeDesiredConfig) {\n            var latestConfig = endpoint.storageGet(ep.key, 'latest-config')\n            if(!latestConfig) {\n                return undefined\n            }\n            desiredConfig = {values: latestConfig.values}\n            endpoint.storageSet(ep.key, 'desired-config', desiredConfig)\n        } else {\n            return undefined\n        }\n    }\n    return desiredConfig\n}\n\nfunction configSetDesired(ep, config) {\n    var desiredConfig = configGetDesired(ep)\n\n    if (!config) return\n\n    var keys = Object.keys(config)\n    keys.forEach(function(key) {\n        desiredConfig.values[key] = config[key]\n    })\n\n    endpoint.storageSet(ep.key, 'desired-config', desiredConfig)\n}\n\nfunction configNeeded(ep, desiredConfig, config) {\n    if (!config) {\n        config = endpoint.storageGet(ep.key, 'latest-config')\n    }\n\n    if (!config) {\n        log.trace('checking if config is needed: yes', {reason: 'no known config'})\n        return true\n    }\n\n    var keys = Object.keys(desiredConfig.values)\n    var match = true\n    keys.forEach(function(key) {\n        if(desiredConfig.values[key] !== config.values[key]) {\n            match = false\n        }\n    })\n\n    if(match) {\n        if (event.endpoint.tags.config == 'update-in-progress') {\n            log.trace('configuration update complete')\n        }\n        if (ep.tags.config && ep.tags.config != 'up-to-date') {\n            endpoint.updateTags(ep.key, { config: 'up-to-date' }, null)\n        }\n    } else {\n         if (ep.tags.config && ep.tags.config != 'update-needed') {\n            endpoint.updateTags(ep.key, { config: 'update-needed' }, null)\n            log.trace('configuration update needed')\n        }\n    }\n    return !match\n}\n",
      "filterType": "library",
      "id": "689e35b1680def24ee5f0a86",
      "name": "Compact UDP Protocol - Library",
      "type": "script"
    },
    {
      "def": "var sd = {}\r\n\r\nif (event.data.data.accountId) {\r\n    sd.accountId = event.data.data.accountId\r\n}\r\nif (event.data.data.reportingInterval) {\r\n    sd.reportingInterval = '' + event.data.data.reportingInterval\r\n}\r\nif (event.data.data.readingInterval) {\r\n    sd.readingInterval = '' + event.data.data.readingInterval\r\n}\r\nif (event.data.data.server) {\r\n    sd.server = '' + event.data.data.server\r\n}\r\n\r\nendpoint.update(event.endpoint.key, { statusDetails: sd })",
      "filterGeneric": "configure-account",
      "filterType": "generic",
      "genericSample": "{\n  \"form\": true,\n   \"title\": \"Set Account parameters\",\n   \"desc\": \"Set account details\",\n   \"icon\": \"mdi-cog-outline\",\n   \"endpoint\":{ \"required\": true },\n   \"serviceKey\": \"customer_settings\",\n   \"fields\": [\n      { \"name\": \"Server\", \"key\": \"server\", \"type\":\"string\"},\n      { \"name\": \"Reporting Interval\", \"key\": \"reportingInterval\", \"type\":\"string\"},\n      { \"name\": \"Reading Interval\", \"key\": \"readingInterval\", \"type\":\"string\"},\n      { \"name\": \"AccountId\", \"key\": \"accountId\", \"type\":\"string\"}\n   ]\n}",
      "id": "689d5ec1680def24ee5eed56",
      "name": "Compact UDP Protocol - Endpoint Action - Set Account Parameters",
      "type": "script"
    },
    {
      "def": "endpoint.updateTags(event.endpoint.key, { config:'report'},null)",
      "filterGeneric": "request-config",
      "filterType": "generic",
      "genericSample": "{\n  \"form\": true,\n   \"title\": \"Request device configuration\",\n   \"desc\": \"Request device configuration\",\n   \"icon\": \"mdi-cog-outline\",\n   \"endpoint\":{ \"required\": true },\n   \"serviceKey\": \"compact-udp-server\"\n}",
      "id": "689cd8e5000d74e17495378f",
      "name": "Compact UDP Protocol - Endpoint Action - Request Config",
      "type": "script"
    },
    {
      "def": "\r\ntrigger.include('Compact UDP Protocol - Library')\r\n\r\nconfigSetDesired(event.endpoint, event.data.data)\r\n",
      "filterGeneric": "reconfigure",
      "filterType": "generic",
      "genericSample": "{\n  \"form\": true,\n   \"title\": \"Reconfigure device\",\n   \"desc\": \"Reconfigure device\",\n   \"icon\": \"mdi-cog-outline\",\n   \"endpoint\":{ \"required\": true },\n   \"serviceKey\": \"compact-udp-server\",\n   \"fields\": [\n      { \"name\": \"Server\", \"key\": \"server\", \"type\":\"string\"},\n      { \"name\": \"Reporting Interval\", \"key\": \"reportingInterval\", \"type\":\"number\"},\n      { \"name\": \"Reading Interval\", \"key\": \"readingInterval\", \"type\":\"number\"}\n   ]\n}",
      "id": "689cd8e5000d74e17495378e",
      "name": "Compact UDP Protocol - Endpoint Action - Reconfigure",
      "rateLimit": {
        "scope": "none",
        "unit": "minute"
      },
      "type": "script"
    },
    {
      "def": "\ntrigger.include('Compact UDP Protocol - Library')\n\nvar debugDecode = false\n\nvar reader = new convert.binReader(event.data.payload)\n\nfunction readVLString(reader) {\n    var vlen = reader.readUint8()\n    if(vlen==0) return\n    return reader.readString(vlen)\n}\n\nfunction writeVLString(writer, str) {\n    writer.writeUint8(str.length)\n    writer.writeString(str)\n}  \n\nfunction rssiToCategory(rssi) {\n  if (rssi >= -65) {\n    return \"great\";\n  } else if (rssi >= -75) {\n    return \"good\";\n  } else if (rssi >= -85) {\n    return \"fair\";\n  } else {\n    return \"poor\";\n  }\n}\n\nfunction readData(reader, pkt) {\n    var dataCount = reader.readUint8()\n    for (var i = 0; i < dataCount; i++) {\n        var sd = {\n            data_type: reader.readUint8(),\n            data_version: reader.readUint8(),\n            data_length: reader.readUint16()\n        }\n\n        if(debugDecode) log.trace('data field: (t:'+sd.data_type+') (v:'+sd.data_version+') (l:'+sd.data_length+')', reader.status())\n\n        switch (sd.data_type) {\n            case 1:\n                var count = reader.readUint8()\n                for(var i=0;i<count;i++) {\n                    pkt.values[readVLString(reader)] = readVLString(reader)\n                }\n                break\n            case 10:\n                var locType = reader.readUint8()\n                switch (locType) {\n                    case 1: // gnss\n                        pkt.loc = {\n                            source: 'gnss',\n                            lat: reader.readFloat32(),\n                            lng: reader.readFloat32()\n                        }\n                        break\n                    case 2: // cell\n                        // get cell location\n                        var cell = {\n                            mcc: +readVLString(reader),\n                            mnc: +readVLString(reader),\n                            cells: [\n                                { lacHex: readVLString(reader), cellIdHex: readVLString(reader), rssi: reader.readInt8() }\n                            ]\n                        }\n                        try {\n                            var loc = location.geolocate('cell-location', cell)\n                            pkt.loc = {\n                                source: 'cell',\n                                lat: loc.lat,\n                                lng: loc.lon\n                            }\n                        } catch (e) {\n                            log.warn('failed to geolocate device: '+e)\n                        }\n                        break\n\n                }\n                break\n            case 11:\n                pkt.values.customer_id = convert.binToHex(reader.readBytes(reader.readUint8()))\n                break\n            case 20:\n                pkt.values.software_version = readVLString(reader)\n                pkt.values.modem_ersion = readVLString(reader)\n                break\n            case 21:\n                var mcc = readVLString(reader)\n                var mnc = readVLString(reader)\n                try {\n                    var net = network.decodeMccMnc(mcc, mnc)\n                    pkt.values.country = net.country\n                    pkt.values.operator = net.operator\n                } catch (e) {\n                    pkt.values.country = 'unknown'\n                    pkt.values.operator = 'unknown'\n                }\n                pkt.values.radio_tech = readVLString(reader)\n                break\n            case 101:\n                pkt.values.battery = reader.readUint8()\n                var rssi = reader.readInt8()\n                if (rssi <= 0) {\n                    pkt.values.rssi = -113;\n                } else if (rssi >= 31) {\n                    pkt.values.rssi = -51;\n                } else {\n                    pkt.values.rssi = (rssi * 2) - 113;\n                }\n\n                var first_ts = reader.readUint32() * 1000\n                var interval = reader.readUint16()\n\n                pkt.values.readings = []\n                var record_count = reader.readUint8()\n                for (var i = 0; i < record_count; i++) {\n                    pkt.values.readings.push({ ts: new Date(first_ts + (interval * i * 1000)), temperature: reader.readUint16() / 10.0, humidity: reader.readUint16() / 10.0 })\n                }\n                endpoint.update(event.endpoint.key, {\n                    addTags: {\n                        signalQuality: rssiToCategory(pkt.values.rssi)\n                    },\n                    statusDetails: {\n                        rssi: pkt.values.rssi,\n                        battery: Math.round(pkt.values.battery / 10) * 10,\n                    }\n                })\n                break\n            case 102:\n                pkt.values.battery = reader.readUint8()\n                var rssi = reader.readInt8()\n                if (rssi <= 0) {\n                    pkt.values.rssi = -113;\n                } else if (rssi >= 31) {\n                    pkt.values.rssi = -51;\n                } else {\n                    pkt.values.rssi = (rssi * 2) - 113;\n                }\n                pkt.values.steps = reader.readUint32()\n                break\n            default:\n        }\n        var addTags = {}\n        var statusDetails = {}\n        if (pkt.values.rssi) {\n            addTags.signalQuality = rssiToCategory(pkt.values.rssi)\n            statusDetails.rssi = pkt.values.rssi\n        }\n        if (pkt.values.battery) {\n            statusDetails.battery = Math.round(pkt.values.battery / 10) * 10\n        }\n        endpoint.update(event.endpoint.key, {\n            addTags: addTags,\n            statusDetails: statusDetails\n        })\n    }\n}\n\nvar desiredConfig = configGetDesired(event.endpoint)\nvar requestConfig = false\n\nvar pkt = {\n    ver: reader.readUint8(),\n    cmd: reader.readString(2),\n    txnId: reader.readUint16(),\n    imei: convert.binToHex(reader.readBytes(reader.readUint8())),\n    ts: new Date(reader.readUint32() * 1000)\n    values: {},\n}\n\n\nif (pkt.imei[0] == '0') {\n    pkt.imei = pkt.imei.substring(1)\n}\n\nif(debugDecode) log.trace('header decoded', pkt)\n\nreadData(reader, pkt)\n\nif(debugDecode) log.trace('data decoded', pkt)\n\nswitch (pkt.cmd) {\n    case 'T':\n        pkt.desc = 'telemetry'\n        requestConfig = configNeeded(event.endpoint, desiredConfig, undefined)\n        break\n    case 'M+':\n        pkt.desc = 'motion-start'\n        requestConfig = configNeeded(event.endpoint, desiredConfig, undefined)\n        break\n    case 'M-':\n        pkt.desc = 'motion-stop'\n        requestConfig = configNeeded(event.endpoint, desiredConfig, undefined)\n        break\n    case 'C':\n        pkt.desc = 'config'\n        requestConfig = configNeeded(event.endpoint, desiredConfig, pkt)\n        break\n    case 'P+':\n        pkt.desc = 'power-on'\n        break\n    default:\n        pkt.desc = 'unknown'\n        break\n}\n\nendpoint.storageSet(event.endpoint.key, 'latest-' + pkt.desc, pkt)\n\n// send ack\nvar writer = convert.binWriter()\nwriter.writeUint8(0x01)\nif (pkt.desc == 'config' && requestConfig) {\n    writer.writeUint8(0x43) // C\n    writer.writeUint8(0x57) // W\n} else if (requestConfig || event.endpoint.tags.config == 'report') {\n    // request configuration from device\n    writer.writeUint8(0x43) // C\n    writer.writeUint8(0x52) // R\n} else {\n    // simple ack, no further action needed\n    writer.writeUint8(0x41) // A\n    writer.writeUint8(0x00)\n}\n\nwriter.writeUint16(pkt.txnId)\nif (pkt.desc == 'config' && requestConfig) {\n    var keys = Object.keys(desiredConfig.values)\n    var configWriter = convert.binWriter()\n    var count = keys.length\n    configWriter.writeUint8(count)\n    log.trace('writing config', desiredConfig)\n    for(var i = 0;i<count;i++) {\n        writeVLString(configWriter,keys[i])\n        writeVLString(configWriter,desiredConfig.values[keys[i]])\n    }\n    writer.writeUint8(1) // number of data elements\n    writer.writeUint8(1) // data type\n    writer.writeUint8(1) // data version\n\n    var configBytes = configWriter.getBytes()\n    writer.writeUint16(configBytes.length)\n    writer.writeBytes(configBytes)\n    \n    endpoint.updateTags(event.endpoint.key, { config: 'update-in-progress' }, null)\n    log.trace('sent configuration update', desiredConfig)\n}\n\nudp.send(event.service.key, event.data.remoteAddr, writer.getBytes())\n\nexec.now('compact-binary-decoded', pkt)\n\n",
      "filterServiceId": "689cd8cf000d74e17495378d",
      "filterType": "udp-receive",
      "id": "689cd8e5000d74e174953794",
      "name": "Compact UDP Protocol - Decode",
      "rateLimit": {
        "scope": "none",
        "unit": "minute"
      },
      "type": "script"
    }
  ],
  "dashboards": [
    {
      "id": "68a3293a000d74e1749537cb",
      "name": "Device Overview",
      "scope": "account",
      "view": {
        "layout": [
          {
            "h": 3,
            "i": "widget-1755523293306",
            "moved": false,
            "static": false,
            "w": 4,
            "x": 0,
            "y": 0
          },
          {
            "h": 3,
            "i": "widget-1755523293306-copy",
            "moved": false,
            "static": false,
            "w": 4,
            "x": 4,
            "y": 0
          },
          {
            "h": 3,
            "i": "widget-1755523293306-copy-copy",
            "moved": false,
            "static": false,
            "w": 4,
            "x": 4,
            "y": 6
          },
          {
            "h": 3,
            "i": "widget-1755523293306-copy-copy-copy",
            "moved": false,
            "static": false,
            "w": 4,
            "x": 0,
            "y": 6
          },
          {
            "h": 6,
            "i": "widget-1755523394373",
            "moved": false,
            "static": false,
            "w": 4,
            "x": 8,
            "y": 0
          },
          {
            "h": 3,
            "i": "widget-1755524262521",
            "moved": false,
            "static": false,
            "w": 4,
            "x": 0,
            "y": 3
          },
          {
            "h": 3,
            "i": "widget-1755524358986",
            "moved": false,
            "static": false,
            "w": 4,
            "x": 4,
            "y": 3
          }
        ]
      },
      "widgets": {
        "widget-1755523293306": {
          "config": {
            "chartType": "pie",
            "field": "tags.customer",
            "fieldType": "string",
            "query": "",
            "ranges": [],
            "showUnknown": false,
            "tags": [],
            "title": "Devices by Customer"
          },
          "id": "widget-1755523293306",
          "type": "endpoint-fields"
        },
        "widget-1755523293306-copy": {
          "config": {
            "chartType": "pie",
            "field": "tags.radioTech",
            "fieldType": "string",
            "query": "",
            "ranges": [],
            "showUnknown": false,
            "tags": [],
            "title": "Devices by Ratio Technology"
          },
          "id": "widget-1755523316025",
          "type": "endpoint-fields"
        },
        "widget-1755523293306-copy-copy": {
          "config": {
            "chartType": "pie",
            "field": "tags.verModem",
            "fieldType": "string",
            "query": "",
            "ranges": [],
            "showUnknown": false,
            "tags": [],
            "title": "Devices by Modem Version"
          },
          "id": "widget-1755523330658",
          "type": "endpoint-fields"
        },
        "widget-1755523293306-copy-copy-copy": {
          "config": {
            "chartType": "pie",
            "field": "tags.verSoftware",
            "fieldType": "string",
            "query": "",
            "ranges": [],
            "showUnknown": false,
            "tags": [],
            "title": "Devices by Software Version"
          },
          "id": "widget-1755523361386",
          "type": "endpoint-fields"
        },
        "widget-1755523394373": {
          "config": {
            "clusterMode": "none",
            "limit": 200,
            "precision": 3,
            "query": "",
            "title": "Device Locations"
          },
          "id": "widget-1755523394373",
          "type": "track-map"
        },
        "widget-1755524262521": {
          "config": {
            "chartType": "pie",
            "field": "statusDetails.battery",
            "fieldType": "number",
            "query": "serviceId==\"689cd8cf000d74e17495378d\"",
            "ranges": [
              {
                "label": "low",
                "max": "25",
                "min": 0
              },
              {
                "label": "fair",
                "max": "50",
                "min": "25"
              },
              {
                "label": "good",
                "max": "75",
                "min": "50"
              },
              {
                "label": "great",
                "max": "101",
                "min": "75"
              }
            ],
            "showUnknown": false,
            "tags": [],
            "title": "Device Battery Levels"
          },
          "id": "widget-1755524262521",
          "type": "endpoint-fields"
        },
        "widget-1755524358986": {
          "config": {
            "chartType": "pie",
            "field": "tags.signalQuality",
            "fieldType": "string",
            "query": "",
            "ranges": [],
            "showUnknown": false,
            "tags": [],
            "title": "Devices by RSSI"
          },
          "id": "widget-1755524358986",
          "type": "endpoint-fields"
        }
      }
    }
  ]
}