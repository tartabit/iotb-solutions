{
  "triggers": [
    {
      "id": "601187c6f9e0e15593398755",
      "name": "Decode RAK7200 sensors",
      "version": 0,
      "type": "script",
      "def": "function Decoder(bytes, port) {\r\n  var hexString=convert.binToHex(bytes)\r\n  return rakSensorDataDecode(hexString);\r\n}\r\n\r\n// convert string to short integer\r\nfunction parseShort(str, base) {\r\n  var n = parseInt(str, base);\r\n  return (n << 16) >> 16;\r\n}\r\n\r\n// convert string to triple bytes integer\r\nfunction parseTriple(str, base) {\r\n  var n = parseInt(str, base);\r\n  return (n << 8) >> 8;\r\n}\r\n\r\n// decode Hex sensor string data to object\r\nfunction rakSensorDataDecode(hexStr) {\r\n  var str = hexStr;\r\n  var myObj = {};\r\n\r\n  while (str.length > 4) {\r\n    var flag = parseInt(str.substring(0, 4), 16);\r\n    switch (flag) {\r\n      case 0x0768:// Humidity\r\n        myObj.humidity = parseFloat(((parseShort(str.substring(4, 6), 16) * 0.01 / 2) * 100).toFixed(1));//unit:%RH\r\n        str = str.substring(6);\r\n        break;\r\n      case 0x0673:// Atmospheric pressure\r\n        myObj.barometer = parseFloat((parseShort(str.substring(4, 8), 16) * 0.1).toFixed(2));//unit:hPa\r\n        str = str.substring(8);\r\n        break;\r\n      case 0x0267:// Temperature\r\n        myObj.temperature = parseFloat((parseShort(str.substring(4, 8), 16) * 0.1).toFixed(2));//unit: °C\r\n        str = str.substring(8);\r\n        break;\r\n      case 0x0188:// GPS\r\n        myObj.latitude = parseFloat((parseTriple(str.substring(4, 10), 16) * 0.0001).toFixed(4));//unit:°\r\n        myObj.longitude = parseFloat((parseTriple(str.substring(10, 16), 16) * 0.0001).toFixed(4));//unit:°\r\n        myObj.altitude = parseFloat((parseTriple(str.substring(16, 22), 16) * 0.01).toFixed(1));//unit:m\r\n        str = str.substring(22);\r\n        break;\r\n      case 0x0371:// Triaxial acceleration\r\n        myObj.acceleration_x = parseFloat((parseShort(str.substring(4, 8), 16) * 0.001).toFixed(3));//unit:g\r\n        myObj.acceleration_y = parseFloat((parseShort(str.substring(8, 12), 16) * 0.001).toFixed(3));//unit:g\r\n        myObj.acceleration_z = parseFloat((parseShort(str.substring(12, 16), 16) * 0.001).toFixed(3));//unit:g\r\n        str = str.substring(16);\r\n        break;\r\n      case 0x0402:// air resistance\r\n        myObj.gasResistance = parseFloat((parseShort(str.substring(4, 8), 16) * 0.01).toFixed(2));//unit:KΩ\r\n        str = str.substring(8);\r\n        break;\r\n      case 0x0802:// Battery Voltage\r\n        myObj.battery = parseFloat((parseShort(str.substring(4, 8), 16) * 0.01).toFixed(2));//unit:V\r\n        str = str.substring(8);\r\n        break;\r\n      case 0x0586:// gyroscope\r\n        myObj.gyroscope_x = parseFloat((parseShort(str.substring(4, 8), 16) * 0.01).toFixed(2));//unit:°/s\r\n        myObj.gyroscope_y = parseFloat((parseShort(str.substring(8, 12), 16) * 0.01).toFixed(2));//unit:°/s\r\n        myObj.gyroscope_z = parseFloat((parseShort(str.substring(12, 16), 16) * 0.01).toFixed(2));//unit:°/s\r\n        str = str.substring(16);\r\n        break;\r\n      case 0x0902:// magnetometer x\r\n        myObj.magnetometer_x = parseFloat((parseShort(str.substring(4, 8), 16) * 0.01).toFixed(2));//unit:μT\r\n        str = str.substring(8);\r\n        break;\r\n      case 0x0a02:// magnetometer y\r\n        myObj.magnetometer_y = parseFloat((parseShort(str.substring(4, 8), 16) * 0.01).toFixed(2));//unit:μT\r\n        str = str.substring(8);\r\n        break;\r\n      case 0x0b02:// magnetometer z\r\n        myObj.magnetometer_z = parseFloat((parseShort(str.substring(4, 8), 16) * 0.01).toFixed(2));//unit:μT\r\n        str = str.substring(8);\r\n        break;\r\n      default:\r\n        str = str.substring(7);\r\n        break;\r\n    }\r\n  }\r\n\r\n  return myObj;\r\n}\r\n\r\nvar obj = Decoder(convert.b64ToBin(event.data.data.data), 0)\r\nobj.endpointKey = event.endpoint.key\r\nobj.ts = event.ts\r\nexec.now('data', obj)\r\n",
      "filterType": "generic",
      "filterCustom": {
        "key": {
          "comp": "eq",
          "value": "rak7200-uplink"
        }
      }
    }
  ]
}
