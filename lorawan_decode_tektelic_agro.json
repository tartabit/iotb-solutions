{
  "triggers": [
    {
      "id": "61ddc9cdb558d00d6807fb13",
      "name": "Decode Tektelic agriculture sensors",
      "type": "script",
      "def": "\r\nfunction Decoder(bytes, port) { //bytes - Array of bytes (signed)\r\n\r\n    function slice(a, f, t) {\r\n        var res = [];\r\n        for (var i = 0; i < t - f; i++) {\r\n            res[i] = a[f + i];\r\n        }\r\n        return res;\r\n    }\r\n\r\n    function extract_bytes(chunk, start_bit, end_bit) {\r\n        var total_bits = end_bit - start_bit + 1;\r\n        var total_bytes = total_bits % 8 === 0 ? to_uint(total_bits / 8) : to_uint(total_bits / 8) + 1;\r\n        var offset_in_byte = start_bit % 8;\r\n        var end_bit_chunk = total_bits % 8;\r\n        var arr = new Array(total_bytes);\r\n        for (byte = 0; byte < total_bytes; ++byte) {\r\n            var chunk_idx = to_uint(start_bit / 8) + byte;\r\n            var lo = chunk[chunk_idx] >> offset_in_byte;\r\n            var hi = 0;\r\n            if (byte < total_bytes - 1) {\r\n                hi = (chunk[chunk_idx + 1] & ((1 << offset_in_byte) - 1)) << (8 - offset_in_byte);\r\n            } else if (end_bit_chunk !== 0) {\r\n                // Truncate last bits\r\n                lo = lo & ((1 << end_bit_chunk) - 1);\r\n            }\r\n            arr[byte] = hi | lo;\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    function apply_data_type(bytes, data_type) {\r\n        var output = 0;\r\n        if (data_type === \"unsigned\") {\r\n            for (var i = 0; i < bytes.length; ++i) {\r\n                output = (to_uint(output << 8)) | bytes[i];\r\n            }\r\n            return output;\r\n        }\r\n        if (data_type === \"signed\") {\r\n            for (var i = 0; i < bytes.length; ++i) {\r\n                output = (output << 8) | bytes[i];\r\n            }\r\n            // Convert to signed, based on value size\r\n            if (output > Math.pow(2, 8 * bytes.length - 1)) {\r\n                output -= Math.pow(2, 8 * bytes.length);\r\n            }\r\n            return output;\r\n        }\r\n        if (data_type === \"bool\") {\r\n            return !(bytes[0] === 0);\r\n        }\r\n        if (data_type === \"hexstring\") {\r\n            return toHexString(bytes);\r\n        }\r\n        // Incorrect data type\r\n        return null;\r\n    }\r\n\r\n    function decode_field(chunk, start_bit, end_bit, data_type) {\r\n        var chunk_size = chunk.length;\r\n        if (end_bit >= chunk_size * 8) {\r\n            return null; // Error: exceeding boundaries of the chunk\r\n        }\r\n        if (end_bit < start_bit) {\r\n            return null; // Error: invalid input\r\n        }\r\n        var arr = extract_bytes(chunk, start_bit, end_bit);\r\n        return apply_data_type(arr, data_type);\r\n    }\r\n\r\n    var decoded_data = {};\r\n    var decoder = [];\r\n\r\n    if (port === 10) {\r\n        decoder = [\r\n            {\r\n                key: [0x00, 0xFF],\r\n                fn: function (arg) {\r\n                    decoded_data.battery_life = decode_field(arg, 0, 7, \"unsigned\");\r\n                    return 1;\r\n                }\r\n            },\r\n            {\r\n                key: [0x01, 0x04],\r\n                fn: function (arg) {\r\n                    decoded_data.input1_frequency = decode_field(arg, 0, 15, \"unsigned\") * 1000;\r\n                    return 2;\r\n                }\r\n            },\r\n            {\r\n                key: [0x02, 0x02],\r\n                fn: function (arg) {\r\n                    decoded_data.input2_voltage = decode_field(arg, 0, 15, \"unsigned\") * 0.001;\r\n                    return 2;\r\n                }\r\n            },\r\n            {\r\n                key: [0x05, 0x04],\r\n                fn: function (arg) {\r\n                    decoded_data.watermark1 = decode_field(arg, 0, 15, \"unsigned\");\r\n                    if (decoded_data.watermark1 > 6430) {\r\n                        decoded_data.watermark1 = 0;\r\n                    } else if (decoded_data.watermark1 > 4330) {\r\n                        decoded_data.watermark1 = (9 - (decoded_data.watermark1 - 4330) * 0.004286) * 1000;\r\n                    } else if (decoded_data.watermark1 > 2820) {\r\n                        decoded_data.watermark1 = (15 - (decoded_data.watermark1 - 2820) * 0.003974) * 1000;\r\n                    } else if (decoded_data.watermark1 > 1110) {\r\n                        decoded_data.watermark1 = (35 - (decoded_data.watermark1 - 1110) * 0.01170) * 1000;\r\n                    } else if (decoded_data.watermark1 > 770) {\r\n                        decoded_data.watermark1 = (55 - (decoded_data.watermark1 - 770) * 0.05884) * 1000;\r\n                    } else if (decoded_data.watermark1 > 600) {\r\n                        decoded_data.watermark1 = (75 - (decoded_data.watermark1 - 600) * 0.1176) * 1000;\r\n                    } else if (decoded_data.watermark1 > 485) {\r\n                        decoded_data.watermark1 = (100 - (decoded_data.watermark1 - 485) * 0.2174) * 1000;\r\n                    } else if (decoded_data.watermark1 > 293) {\r\n                        decoded_data.watermark1 = (200 - (decoded_data.watermark1 - 293) * 0.5208) * 1000;\r\n                    } else {\r\n                        decoded_data.watermark1 = 200 * 1000;\r\n                    }\r\n                    return 2;\r\n                }\r\n            },\r\n            {\r\n                key: [0x06, 0x04],\r\n                fn: function (arg) {\r\n                    decoded_data.watermark2 = decode_field(arg, 0, 15, \"unsigned\");\r\n                    // convertion done as per the communication from the Tektelic sensor team on Jan 13, 2020 - contact: Mark Oevering - details absent in the TRM\r\n                    if (decoded_data.watermark2 > 6430) {\r\n                        decoded_data.watermark2 = 0;\r\n                    } else if (decoded_data.watermark2 > 4330) {\r\n                        decoded_data.watermark2 = (9 - (decoded_data.watermark2 - 4330) * 0.004286) * 1000;\r\n                    } else if (decoded_data.watermark2 > 2820) {\r\n                        decoded_data.watermark2 = (15 - (decoded_data.watermark2 - 2820) * 0.003974) * 1000;\r\n                    } else if (decoded_data.watermark2 > 1110) {\r\n                        decoded_data.watermark2 = (35 - (decoded_data.watermark2 - 1110) * 0.01170) * 1000;\r\n                    } else if (decoded_data.watermark2 > 770) {\r\n                        decoded_data.watermark2 = (55 - (decoded_data.watermark2 - 770) * 0.05884) * 1000;\r\n                    } else if (decoded_data.watermark2 > 600) {\r\n                        decoded_data.watermark2 = (75 - (decoded_data.watermark2 - 600) * 0.1176) * 1000;\r\n                    } else if (decoded_data.watermark2 > 485) {\r\n                        decoded_data.watermark2 = (100 - (decoded_data.watermark2 - 485) * 0.2174) * 1000;\r\n                    } else if (decoded_data.watermark2 > 293) {\r\n                        decoded_data.watermark2 = (200 - (decoded_data.watermark2 - 293) * 0.5208) * 1000;\r\n                    } else {\r\n                        decoded_data.watermark2 = 200 * 1000;\r\n                    }\r\n                    return 2;\r\n                }\r\n            },\r\n            {\r\n                key: [0x09, 0x65],\r\n                fn: function (arg) {\r\n                    decoded_data.light_intensity = decode_field(arg, 0, 15, \"unsigned\");\r\n                    return 2;\r\n                }\r\n            },\r\n            {\r\n                key: [0x09, 0x00],\r\n                fn: function (arg) {\r\n                    decoded_data.light_detected = decode_field(arg, 0, 7, \"unsigned\");\r\n                    return 1;\r\n                }\r\n            },\r\n            {\r\n                key: [0x0A, 0x71],\r\n                fn: function (arg) {\r\n                    decoded_data['acceleration.xaxis'] = decode_field(arg, 32, 47, \"signed\") * 0.001;\r\n                    decoded_data['acceleration.yaxis'] = decode_field(arg, 16, 31, \"signed\") * 0.001;\r\n                    decoded_data['acceleration.zaxis'] = decode_field(arg, 0, 15, \"signed\") * 0.001;\r\n                    return 6;\r\n                }\r\n            },\r\n            {\r\n                key: [0x0A, 0x02],\r\n                fn: function (arg) {\r\n                    decoded_data.impact_magnitude = decode_field(arg, 0, 15, \"unsigned\") * 0.001;\r\n                    return 2;\r\n                }\r\n            },\r\n            {\r\n                key: [0x0A, 0x00],\r\n                fn: function (arg) {\r\n                    decoded_data.impact_alarm = decode_field(arg, 0, 7, \"unsigned\");\r\n                    return 1;\r\n                }\r\n            },\r\n            {\r\n                key: [0x0B, 0x67],\r\n                fn: function (arg) {\r\n                    decoded_data.ambient_temperature = decode_field(arg, 0, 15, \"signed\") * 0.1;\r\n                    return 2;\r\n                }\r\n            },\r\n            {\r\n                key: [0x0B, 0x68],\r\n                fn: function (arg) {\r\n                    // Ambient RH\r\n                    decoded_data.relative_humidity = decode_field(arg, 0, 7, \"unsigned\") * 0.5;\r\n                    return 1;\r\n                }\r\n            },\r\n            {\r\n                key: [0x0C, 0x67],\r\n                fn: function (arg) {\r\n                    decoded_data.mcu_temperature = decode_field(arg, 0, 7, \"signed\") * 0.1;\r\n                    return 1;\r\n                }\r\n            },\r\n        ]\r\n    }\r\n    if (port === 100) {\r\n        decoder = [\r\n            {\r\n                key: [0x00],\r\n                fn: function (arg) {\r\n                    decoded_data.device_eui = decode_field(arg, 0, 63, \"hexstring\");\r\n                    return 8;\r\n                }\r\n            },\r\n            {\r\n                key: [0x01],\r\n                fn: function (arg) {\r\n                    decoded_data.app_eui = decode_field(arg, 0, 63, \"hexstring\");\r\n                    return 8;\r\n                }\r\n            },\r\n            {\r\n                key: [0x02],\r\n                fn: function (arg) {\r\n                    decoded_data.app_key = decode_field(arg, 0, 127, \"hexstring\");\r\n                    return 16;\r\n                }\r\n            },\r\n            {\r\n                key: [0x03],\r\n                fn: function (arg) {\r\n                    decoded_data.device_address = decode_field(arg, 0, 31, \"hexstring\");\r\n                    return 4;\r\n                }\r\n            },\r\n            {\r\n                key: [0x04],\r\n                fn: function (arg) {\r\n                    decoded_data.network_session_key = decode_field(arg, 0, 127, \"hexstring\");\r\n                    return 16;\r\n                }\r\n            },\r\n            {\r\n                key: [0x05],\r\n                fn: function (arg) {\r\n                    decoded_data.app_session_key = decode_field(arg, 0, 127, \"hexstring\");\r\n                    return 16;\r\n                }\r\n            },\r\n            {\r\n                key: [0x10],\r\n                fn: function (arg) {\r\n                    decoded_data.loramac_join_mode = decode_field(arg, 7, 7, \"unsigned\");\r\n                    return 2;\r\n                }\r\n            },\r\n            {\r\n                key: [0x11],\r\n                fn: function (arg) {\r\n                    decoded_data['loramac_opts.confirm_mode'] = decode_field(arg, 8, 8, \"unsigned\");\r\n                    decoded_data['loramac_opts.sync_word'] = decode_field(arg, 9, 9, \"unsigned\");\r\n                    decoded_data['loramac_opts.duty_cycle'] = decode_field(arg, 10, 10, \"unsigned\");\r\n                    decoded_data['loramac_opts.adr'] = decode_field(arg, 11, 11, \"unsigned\");\r\n                    return 2;\r\n                }\r\n            },\r\n            {\r\n                key: [0x12],\r\n                fn: function (arg) {\r\n                    decoded_data['loramac_dr_tx.dr_number'] = decode_field(arg, 0, 3, \"unsigned\");\r\n                    decoded_data['loramac_dr_tx.tx_power_number'] = decode_field(arg, 8, 11, \"unsigned\");\r\n                    return 2;\r\n                }\r\n            },\r\n            {\r\n                key: [0x13],\r\n                fn: function (arg) {\r\n                    decoded_data['loramac_rx2.frequency'] = decode_field(arg, 0, 31, \"unsigned\");\r\n                    decoded_data['loramac_rx2.dr_number'] = decode_field(arg, 32, 39, \"unsigned\");\r\n                    return 5;\r\n                }\r\n            },\r\n            {\r\n                key: [0x20],\r\n                fn: function (arg) {\r\n                    decoded_data.seconds_per_core_tick = decode_field(arg, 0, 31, \"unsigned\");\r\n                    return 4;\r\n                }\r\n            },\r\n            {\r\n                key: [0x21],\r\n                fn: function (arg) {\r\n                    decoded_data.tick_per_battery = decode_field(arg, 0, 15, \"unsigned\");\r\n                    return 2;\r\n                }\r\n            },\r\n            {\r\n                key: [0x22],\r\n                fn: function (arg) {\r\n                    decoded_data.tick_per_ambient_temperature = decode_field(arg, 0, 15, \"unsigned\");\r\n                    return 2;\r\n                }\r\n            },\r\n            {\r\n                key: [0x23],\r\n                fn: function (arg) {\r\n                    decoded_data.tick_per_relative_humidity = decode_field(arg, 0, 15, \"unsigned\");\r\n                    return 2;\r\n                }\r\n            },\r\n            {\r\n                key: [0x24],\r\n                fn: function (arg) {\r\n                    decoded_data.tick_per_light = decode_field(arg, 0, 15, \"unsigned\");\r\n                    return 2;\r\n                }\r\n            },\r\n            {\r\n                key: [0x25],\r\n                fn: function (arg) {\r\n                    decoded_data.tick_per_input1 = decode_field(arg, 0, 15, \"unsigned\");\r\n                    return 2;\r\n                }\r\n            },\r\n            {\r\n                key: [0x26],\r\n                fn: function (arg) {\r\n                    decoded_data.tick_per_input2 = decode_field(arg, 0, 15, \"unsigned\");\r\n                    return 2;\r\n                }\r\n            },\r\n            {\r\n                key: [0x29],\r\n                fn: function (arg) {\r\n                    decoded_data.tick_per_watermark1 = decode_field(arg, 0, 15, \"unsigned\");\r\n                    return 2;\r\n                }\r\n            },\r\n            {\r\n                key: [0x2A],\r\n                fn: function (arg) {\r\n                    decoded_data.tick_per_watermark2 = decode_field(arg, 0, 15, \"unsigned\");\r\n                    return 2;\r\n                }\r\n            },\r\n            {\r\n                key: [0x2C],\r\n                fn: function (arg) {\r\n                    decoded_data.tick_per_accelerometer = decode_field(arg, 0, 15, \"unsigned\");\r\n                    return 2;\r\n                }\r\n            },\r\n            {\r\n                key: [0x2D],\r\n                fn: function (arg) {\r\n                    decoded_data.tick_per_orientation_alarm = decode_field(arg, 0, 15, \"unsigned\");\r\n                    return 2;\r\n                }\r\n            },\r\n            {\r\n                key: [0x2E],\r\n                fn: function (arg) {\r\n                    decoded_data.tick_per_mcu_tempearture = decode_field(arg, 0, 15, \"unsigned\");\r\n                    return 2;\r\n                }\r\n            },\r\n            {\r\n                key: [0x30],\r\n                fn: function (arg) {\r\n                    decoded_data.temperature_relative_humidity_idle = decode_field(arg, 0, 31, \"unsigned\");\r\n                    return 4;\r\n                }\r\n            },\r\n            {\r\n                key: [0x31],\r\n                fn: function (arg) {\r\n                    decoded_data.temperature_relative_humidity_active = decode_field(arg, 0, 31, \"unsigned\");\r\n                    return 4;\r\n                }\r\n            },\r\n            {\r\n                key: [0x32],\r\n                fn: function (arg) {\r\n                    decoded_data['ambient_temperature_threshold.high'] = decode_field(arg, 0, 7, \"unsigned\");\r\n                    decoded_data['ambient_temperature_threshold.low'] = decode_field(arg, 8, 15, \"unsigned\");\r\n                    return 2;\r\n                }\r\n            },\r\n            {\r\n                key: [0x33],\r\n                fn: function (arg) {\r\n                    decoded_data.ambient_temperature_threshold_enabled = decode_field(arg, 0, 0, \"unsigned\");\r\n                    return 1;\r\n                }\r\n            },\r\n            {\r\n                key: [0x34],\r\n                fn: function (arg) {\r\n                    decoded_data['relative_humidity_threshold.high'] = decode_field(arg, 0, 7, \"unsigned\");\r\n                    decoded_data['relative_humidity_threshold.low'] = decode_field(arg, 8, 15, \"unsigned\");\r\n                    return 2;\r\n                }\r\n            },\r\n            {\r\n                key: [0x35],\r\n                fn: function (arg) {\r\n                    decoded_data.relative_humidity_threshold_enabled = decode_field(arg, 0, 0, \"unsigned\");\r\n                    return 1;\r\n                }\r\n            },\r\n            {\r\n                key: [0x36],\r\n                fn: function (arg) {\r\n                    decoded_data.input_sample_period_idle = decode_field(arg, 0, 31, \"unsigned\");\r\n                    return 4;\r\n                }\r\n            },\r\n            {\r\n                key: [0x37],\r\n                fn: function (arg) {\r\n                    decoded_data.input_sample_period_active = decode_field(arg, 0, 31, \"unsigned\");\r\n                    return 4;\r\n                }\r\n            },\r\n            {\r\n                key: [0x38],\r\n                fn: function (arg) {\r\n                    decoded_data['input1_threshold.high'] = decode_field(arg, 0, 15, \"unsigned\") * 1000;\r\n                    decoded_data['input1_threshold.low'] = decode_field(arg, 16, 31, \"unsigned\") * 1000;\r\n                    return 4;\r\n                }\r\n            },\r\n            {\r\n                key: [0x39],\r\n                fn: function (arg) {\r\n                    decoded_data['input2_threshold.high'] = decode_field(arg, 0, 15, \"unsigned\") * 0.001;\r\n                    decoded_data['input2_threshold.low'] = decode_field(arg, 16, 31, \"unsigned\") * 0.001;\r\n                    return 4;\r\n                }\r\n            },\r\n            {\r\n                key: [0x3C],\r\n                fn: function (arg) {\r\n                    decoded_data['moisture1_threshold.high'] = decode_field(arg, 0, 15, \"unsigned\") * 1000;\r\n                    decoded_data['moisture1_threshold.low'] = decode_field(arg, 16, 31, \"unsigned\") * 1000;\r\n                    return 4;\r\n                }\r\n            },\r\n            {\r\n                key: [0x3D],\r\n                fn: function (arg) {\r\n                    decoded_data['moisture2_threshold.high'] = decode_field(arg, 0, 15, \"unsigned\") * 1000;\r\n                    decoded_data['moisture2_threshold.low'] = decode_field(arg, 16, 31, \"unsigned\") * 1000;\r\n                    return 4;\r\n                }\r\n            },\r\n            {\r\n                key: [0x3F],\r\n                fn: function (arg) {\r\n                    decoded_data['threshold_enabled.input1'] = decode_field(arg, 0, 0, \"unsigned\");\r\n                    decoded_data['threshold_enabled.input2'] = decode_field(arg, 1, 1, \"unsigned\");\r\n                    decoded_data['threshold_enabled.input5'] = decode_field(arg, 4, 4, \"unsigned\");\r\n                    decoded_data['threshold_enabled.input6'] = decode_field(arg, 5, 5, \"unsigned\");\r\n                    return 1;\r\n                }\r\n            },\r\n            {\r\n                key: [0x40],\r\n                fn: function (arg) {\r\n                    decoded_data.mcu_temperature_sample_period_idle = decode_field(arg, 0, 31, \"unsigned\");\r\n                    return 4;\r\n                }\r\n            },\r\n            {\r\n                key: [0x41],\r\n                fn: function (arg) {\r\n                    decoded_data.mcu_temperature_sample_period_active = decode_field(arg, 0, 31, \"unsigned\");\r\n                    return 4;\r\n                }\r\n            },\r\n            {\r\n                key: [0x42],\r\n                fn: function (arg) {\r\n                    decoded_data['mcu_temperature_threshold.high'] = decode_field(arg, 0, 7, \"unsigned\");\r\n                    decoded_data['mcu_temperature_threshold.low'] = decode_field(arg, 8, 15, \"unsigned\");\r\n                    return 2;\r\n                }\r\n            },\r\n            {\r\n                key: [0x43],\r\n                fn: function (arg) {\r\n                    decoded_data.mcu_temperature_threshold_enabled = decode_field(arg, 0, 0, \"unsigned\");\r\n                    return 1;\r\n                }\r\n            },\r\n            {\r\n                key: [0x48],\r\n                fn: function (arg) {\r\n                    decoded_data.interrupt_enabled = decode_field(arg, 0, 0, \"unsigned\");\r\n                    return 1;\r\n                }\r\n            },\r\n            {\r\n                key: [0x49],\r\n                fn: function (arg) {\r\n                    decoded_data.upper_threshold = decode_field(arg, 0, 31, \"unsigned\");\r\n                    return 4;\r\n                }\r\n            },\r\n            {\r\n                key: [0x4A],\r\n                fn: function (arg) {\r\n                    decoded_data.lower_threshold = decode_field(arg, 0, 31, \"unsigned\");\r\n                    return 4;\r\n                }\r\n            },\r\n            {\r\n                key: [0x4B],\r\n                fn: function (arg) {\r\n                    decoded_data.threshold_timer = decode_field(arg, 0, 7, \"unsigned\") * 0.1;\r\n                    return 1;\r\n                }\r\n            },\r\n            {\r\n                key: [0x4C],\r\n                fn: function (arg) {\r\n                    decoded_data.light_sample_period_active = decode_field(arg, 0, 31, \"unsigned\");\r\n                    return 4;\r\n                }\r\n            },\r\n            {\r\n                key: [0x4D],\r\n                fn: function (arg) {\r\n                    decoded_data['als_tx.light_alarm_reported'] = decode_field(arg, 0, 0, \"unsigned\");\r\n                    decoded_data['als_tx.light_intensity_reported'] = decode_field(arg, 1, 1, \"unsigned\");\r\n                    return 1;\r\n                }\r\n            },\r\n            {\r\n                key: [0x50],\r\n                fn: function (arg) {\r\n                    decoded_data.orientation_alarm_threshold = decode_field(arg, 0, 0, \"unsigned\");\r\n                    return 2;\r\n                }\r\n            },\r\n            {\r\n                key: [0x51],\r\n                fn: function (arg) {\r\n                    decoded_data['accelerometer_tx.orientation_alarm_reported'] = decode_field(arg, 0, 0, \"unsigned\");\r\n                    decoded_data['accelerometer_tx.orientation_vector_reported'] = decode_field(arg, 5, 5, \"unsigned\");\r\n                    return 1;\r\n                }\r\n            },\r\n            {\r\n                key: [0x52],\r\n                fn: function (arg) {\r\n                    decoded_data['mode.orientation_alarm_enabled'] = decode_field(arg, 0, 0, \"unsigned\");\r\n                    decoded_data['mode.accelerometer_power_on'] = decode_field(arg, 7, 7, \"unsigned\");\r\n                    return 1;\r\n                }\r\n            },\r\n            {\r\n                key: [0x71],\r\n                fn: function (arg) {\r\n                    decoded_data['firmware_version.app_major_version'] = decode_field(arg, 0, 7, \"unsigned\");\r\n                    decoded_data['firmware_version.app_minor_version'] = decode_field(arg, 8, 15, \"unsigned\");\r\n                    decoded_data['firmware_version.app_revision'] = decode_field(arg, 16, 23, \"unsigned\");\r\n                    decoded_data['firmware_version.loramac_major_version'] = decode_field(arg, 24, 31, \"unsigned\");\r\n                    decoded_data['firmware_version.loramac_minor_version'] = decode_field(arg, 32, 39, \"unsigned\");\r\n                    decoded_data['firmware_version.loramac_revision'] = decode_field(arg, 40, 47, \"unsigned\");\r\n                    decoded_data['firmware_version.region'] = decode_field(arg, 48, 55, \"unsigned\");\r\n                    return 7;\r\n                }\r\n            }\r\n        ]\r\n    }\r\n\r\n    bytes = convertToUint8Array(bytes);\r\n    decoded_data['raw'] = JSON.stringify(byteToArray(bytes));\r\n    decoded_data['port'] = port;\r\n\r\n    for (var bytes_left = bytes.length; bytes_left > 0;) {\r\n        var found = false;\r\n        for (var i = 0; i < decoder.length; i++) {\r\n            var item = decoder[i];\r\n            var key = item.key;\r\n            var keylen = key.length;\r\n            var header = slice(bytes, 0, keylen);\r\n            // Header in the data matches to what we expect\r\n            if (is_equal(header, key)) {\r\n                var f = item.fn;\r\n                var consumed = f(slice(bytes, keylen, bytes.length)) + keylen;\r\n                bytes_left -= consumed;\r\n                bytes = slice(bytes, consumed, bytes.length);\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n        if (found) {\r\n            continue;\r\n        }\r\n        // Unable to decode -- headers are not as expected, send raw payload to the application!\r\n        decoded_data = {};\r\n        decoded_data['raw'] = JSON.stringify(byteToArray(bytes));\r\n        decoded_data['port'] = port;\r\n        return decoded_data;\r\n    }\r\n\r\n    // Converts value to unsigned\r\n    function to_uint(x) {\r\n        return x >>> 0;\r\n    }\r\n\r\n    // Checks if two arrays are equal\r\n    function is_equal(arr1, arr2) {\r\n        if (arr1.length != arr2.length) {\r\n            return false;\r\n        }\r\n        for (var i = 0; i != arr1.length; i++) {\r\n            if (arr1[i] != arr2[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function byteToArray(byteArray) {\r\n        var arr = [];\r\n        for (var i = 0; i < byteArray.length; i++) {\r\n            arr.push(byteArray[i]);\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    function convertToUint8Array(byteArray) {\r\n        var arr = [];\r\n        for (var i = 0; i < byteArray.length; i++) {\r\n            arr.push(to_uint(byteArray[i]) & 0xff);\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    function toHexString(byteArray) {\r\n        var arr = [];\r\n        for (var i = 0; i < byteArray.length; ++i) {\r\n            arr.push(('0' + (byteArray[i] & 0xFF).toString(16)).slice(-2));\r\n        }\r\n        return arr.join('');\r\n    }\r\n\r\n    return decoded_data;\r\n}\r\n\r\nvar obj = Decoder(convert.b64ToBin(event.data.data.data),event.data.data.port)\r\n\r\nobj.soil_temperature = -31.96*Math.log(obj.input2_voltage*1000)+213.25\r\nobj.input1_frequency = obj.input1_frequency/1000\r\nif(obj.input1_frequency <= 1346) {\r\n  obj.soil_moisture = 1.2\r\n} else if(obj.input1_frequency <= 1351) {\r\n  obj.soil_moisture = 1.1\r\n} else if(obj.input1_frequency <= 1356) {\r\n  obj.soil_moisture = 1.0\r\n} else if(obj.input1_frequency <= 1361) {\r\n  obj.soil_moisture = 0.9\r\n} else if(obj.input1_frequency <= 1366) {\r\n  obj.soil_moisture = 0.8\r\n} else if(obj.input1_frequency <= 1371) {\r\n  obj.soil_moisture = 0.7\r\n} else if(obj.input1_frequency <= 1376) {\r\n  obj.soil_moisture = 0.6\r\n} else if(obj.input1_frequency <= 1381) {\r\n  obj.soil_moisture = 0.5\r\n} else if(obj.input1_frequency <= 1386) {\r\n  obj.soil_moisture = 0.4\r\n} else if(obj.input1_frequency <= 1391) {\r\n  obj.soil_moisture = 0.3\r\n} else if(obj.input1_frequency <= 1396) {\r\n  obj.soil_moisture = 0.2\r\n} else {\r\n  obj.soil_moisture = 0.1\r\n}\r\n\r\nif(isNaN(obj.soil_temperature)) {\r\n    delete obj.soil_temperature\r\n}\r\n\r\nvar data = {\r\n    ambientTemperature: obj.ambient_temperature,\r\n    ambientHumidity: obj.relative_humidity,\r\n    soilTemperature: obj.soil_temperature,\r\n    soilMoisture: obj.soil_moisture,\r\n    ambientLight: obj.light_intensity\r\n}\r\n\r\nexec.now('data',data)",
      "filterType": "generic",
      "filterCustom": {
        "key": {
          "comp": "eq",
          "value": "tektelic-agro-uplink"
        }
      }
    }
  ]
}
