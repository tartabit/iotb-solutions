{
  "templateDef": [
    {
      "name": "Solution Prefix",
      "key": "prefix",
      "desc": "Prefix to be prepended on all defined objects.",
      "genWords": 2
    },
    {
      "name": "Assigned UDP port",
      "key": "udp_port",
      "desc": "Enter the UDP port assigned to your account."
    },
    {
      "name": "Azure connection string",
      "key": "conn_string",
      "desc": "Enter the connection string for a policy with 'iothubowner' rights.",
      "value": "HostName=****.azure-devices.net;SharedAccessKeyName=iothubowner;SharedAccessKey=********"
    }
  ],
  "services": [
    {
      "id": "60ad11bb73950132fc172328",
      "name": "Queclink ASCII Port ({{.prefix}})",
      "key": "{{.prefix}}_queclink_ascii_port",
      "modelId": "81418d0e1607815e03483843",
      "params": {
        "port": "{{.port}}"
      }
    },
    {
      "id": "6092bed1943d9e84f1ce5acb",
      "name": "Azure IoT Hub ({{.prefix}})",
      "key": "{{.prefix}}_azure_iothub",
      "modelId": "811382a6ea7fb1f40f682af3",
      "params": {
        "activity_timeout": "60",
        "authentication": "ServiceAccount",
        "connection_string": "{{ .conn_string }}"
      }
    }
  ],
  "triggers": [
    {
      "id": "60ad11f873950132fc172329",
      "name": "Queclink ASCII Decoder ({{.prefix}})",
      "type": "script",
      "def": "/* \r\n SAMPLE TRANSACTION\r\n 0 +RESP:GTFRI,\r\n 1 D80100,\r\n 2 860112043710831,\r\n 3 GL500M,\r\n 4 ,\r\n 5 0,\r\n 6 1,\r\n 7 2,\r\n 8 0.1,\r\n 9 89,\r\n10 27.9,\r\n11 -80.179593,\r\n12 26.379392,\r\n13 20210525100536,\r\n14 0310,\r\n15 0410,\r\n16 372D,\r\n17 0A6BBC10,\r\n18 20,\r\n19 0,\r\n20 ,\r\n21 99,\r\n22 0,\r\n23 ,\r\n24 1,\r\n25 12,\r\n26 20210525100619,\r\n27 0013$ \r\n*/\r\n\r\nvar report = {}\r\n\r\nvar payload = event.data.payload\r\n\r\nif(!payload.endsWith('$')) {\r\n  log.warn('received invalid packet',payload)\r\n  exit()\r\n}\r\n\r\nif(payload.startsWith('+RESP:')) {\r\n  var fields = payload.split(',')\r\n  var fieldOffset = 0\r\n  report.packetType = 'position'\r\n  report.messageType = fields[0].substring(6,11)\r\n  switch(fields[0]) {\r\n    case '+RESP:GTGEO':\r\n       report.messageTypeDetail = 'Geofence'\r\n       break\r\n    case '+RESP:GTFRI':\r\n       report.messageTypeDetail = 'Timed Message'\r\n       break\r\n    case '+RESP:GTPNL':\r\n       report.messageTypeDetail = 'Power On'\r\n       break\r\n    case '+RESP:GTNMR':\r\n       report.messageTypeDetail = 'Movement'\r\n       break\r\n    case '+RESP:GTRTL':\r\n       report.messageTypeDetail = 'Realtime Report'\r\n       break\r\n    case '+RESP:GTDOG':\r\n       report.messageTypeDetail = 'Watchdog Reboot'\r\n       break\r\n    case '+RESP:GTSOS':\r\n       report.messageTypeDetail = 'SOS'\r\n       break\r\n    case '+RESP:GTLBC':\r\n       report.messageTypeDetail = 'Location Request'\r\n       fieldOffset = -2\r\n       break\r\n    default:\r\n       report.messageTypeDetail = 'Unknown'\r\n       break\r\n  }\r\n  switch(fields[1].substring(0,2)) {\r\n    case 'D8':\r\n      report.deviceType = 'GL50M'\r\n      break\r\n    default:\r\n      report.deviceType = 'Unknown:'+fields[1].substring(0,2)\r\n      break\r\n  }\r\n  report.name = fields[2]\r\n\r\n  if(report.messageType!='GTLBC') {\r\n    switch(report.messageType) {\r\n      case 'GTNMR':\r\n        switch(fields[5]) {\r\n          case '0':\r\n            report.reportType='no-motion'\r\n            break\r\n          case '1':\r\n            report.reportType='motion'\r\n            break\r\n        }\r\n        break\r\n      case 'GTDIS':\r\n        switch(fields[5]) {\r\n          case '0':\r\n            report.reportType='input-disabled'\r\n            break\r\n          case '1':\r\n            report.reportType='input-enabled'\r\n            break\r\n        }\r\n        break\r\n    }\r\n \r\n  }\r\n\r\n  if( fields[11+fieldOffset].length>0 && fields[12+fieldOffset].length>0 ) {\r\n    var loc = {}\r\n    loc.accuracy = +fields[7+fieldOffset]\r\n    loc.speed = +fields[8+fieldOffset]\r\n    loc.heading = +fields[9+fieldOffset]\r\n    loc.altitude = +fields[10+fieldOffset]\r\n    loc.longitude = +fields[11+fieldOffset]\r\n    loc.latitude = +fields[12+fieldOffset]\r\n    loc.ts = date.convert(fields[13+fieldOffset],'20060102150405','rfc3339')\r\n    report.location = loc\r\n  }\r\n\r\n  if( fields[14+fieldOffset].length>1 && fields[15+fieldOffset].length>1 ) {\r\n    var net = {}\r\n    net.mcc = fields[14+fieldOffset].substring(1,4)\r\n    net.mnc = fields[15+fieldOffset].substring(1,4)\r\n    net.lac = fields[16+fieldOffset]\r\n    net.cellId = fields[17+fieldOffset]\r\n    // need to parse rssi\r\n    report.network = net\r\n  }\r\n\r\n  if(fields[21+fieldOffset].length>0) {\r\n    report.battery = +fields[21+fieldOffset]\r\n  }\r\n\r\n  if(fields[22+fieldOffset].length>0) {\r\n    switch(fields[22+fieldOffset]) {\r\n      case '0':\r\n        report.mode='psm'\r\n        break\r\n      case '1':\r\n        report.mode='continuous'\r\n        break\r\n    }\r\n  }\r\n\r\n  if(fields[23+fieldOffset].length>0) {\r\n    switch(fields[23+fieldOffset]) {\r\n      case '0':\r\n        report.movement=false\r\n        break\r\n      case '1':\r\n        report.movement=true\r\n        break\r\n    }\r\n  } else {\r\n    report.movement = false\r\n  }\r\n\r\n  if(report.messageType!='GTLBC') {\r\n    if(fields[24+fieldOffset].length>0) {\r\n      switch(fields[24+fieldOffset]) {\r\n        case '0':\r\n          report.radioAccessTech = 'GSM'\r\n          break\r\n        case '1':\r\n          report.radioAccessTech = 'LTE Cat-M'\r\n          break\r\n        case '2':\r\n          report.radioAccessTech = 'NB-IoT'\r\n          break\r\n      }\r\n    }\r\n    if(fields[25+fieldOffset].length>0) {\r\n      report.radioBand = +fields[25+fieldOffset]\r\n    }\r\n  } else {\r\n    fieldOffset = -3\r\n  }\r\n\r\n  report.ts = date.convert(fields[26+fieldOffset],'20060102150405','rfc3339')\r\n\r\n  //log.trace('decoded',report)\r\n\r\n  exec.now('queclink-ascii-report',{report:report, remoteAddr: event.data.remoteAddr, raw: event.data.payload})\r\n\r\n} else {\r\n    log.trace('received unsupported message',payload)\r\n}\r\n\r\n\r\n",
      "filterServiceId": "60ad11bb73950132fc172328",
      "filterType": "udp-receive"
    },
    {
      "id": "60ad184173950132fc17232a",
      "name": "Queclink ASCII report to Azure IoT Hub ({{.prefix}})",
      "type": "script",
      "def": "azure_iot.send('{{.prefix}}_azure_iothub', event.data.data.report.name, event.data.data.report);\nazure_iot.twin_update('{{.prefix}}_azure_iothub', event.data.data.report.name, event.data.data.report);",
      "filterType": "generic",
      "filterCustom": {
        "key": {
          "comp": "eq",
          "value": "queclink-ascii-report"
        }
      }
    }
  ]
}
