{
  "triggers": [
    {
      "id": "66c387f07d83f1413108848d",
      "name": "Email Daily Summary",
      "type": "script",
      "def": "// ----------------------------------------\r\n// -- configure the email report here, sourced from global variables\r\n// ----------------------------------------\r\n\r\nvar showAccountsCreatedInPastDays = global.values.dailySummaryConfig.showAccountsCreatedInPastDays\r\nvar showTopAccounts = global.values.dailySummaryConfig.showTopAccounts\r\nvar sendTo = global.values.dailySummaryConfig.sendTo\r\nvar serverName = global.values.dailySummaryConfig.name\r\n\r\n// ----------------------------------------\r\n// -- get the account list and prepare it\r\n// ----------------------------------------\r\n\r\nvar accounts = api.get('/api/v1/account')\r\n\r\nvar accountList = {}\r\naccounts.body.forEach( function(acct) {\r\n    accountList[acct.id] = acct\r\n    acct.createdUnix = +date.parse(acct.dateCreated,'rfc3339')\r\n})\r\n\r\naccounts.body.forEach( function(acct) {\r\n    var nameParts = []\r\n    acct.ancestors.forEach( function(ans) {\r\n        var ansAcct = accountList[ans]\r\n        if(ansAcct) {\r\n            nameParts.push(ansAcct.name)\r\n        } else {\r\n            nameParts.push('unknown')\r\n        }\r\n    })\r\n    acct.fullName = nameParts.join('.')\r\n    accountList[acct.id] = acct\r\n})\r\n\r\n// ----------------------------------------\r\n// -- build the \"new\" accounts table\r\n// ----------------------------------------\r\n\r\nvar newAccountsTable = []\r\nvar newAccountCutoff = new Date() - showAccountsCreatedInPastDays * 86400000\r\n\r\naccounts.body.forEach( function(acct) {\r\n    if(acct.createdUnix>newAccountCutoff) {\r\n        newAccountsTable.push(acct)\r\n    }\r\n})\r\n\r\nnewAccountsTable.sort(function(a, b) {\r\n    if (a.createdUnix < b.createdUnix) return 1;\r\n    if (a.createdUnix > b.createdUnix) return -1;\r\n    return 0;\r\n});\r\n\r\n// ----------------------------------------\r\n// -- build the usage table\r\n// ----------------------------------------\r\n\r\nvar query = {subAccounts: true, period: 1, pivot: 'accountId', interval: 'period', object: 'services'}\r\nvar counters = api.get('/api/v1/metrics/activity?object=services&interval=period&pivot=accountId&period=30&subAccounts=true',query)\r\n\r\nvar usageTable = []\r\nfor(var acctId in counters.body.series) {\r\n    var acct = accountList[acctId]\r\n    var name = acctId\r\n    if(acct) {\r\n        name = acct.fullName\r\n    }\r\n    var obj = counters.body.series[acctId][0]\r\n    obj.name = name\r\n    usageTable.push(obj)\r\n}\r\n\r\nusageTable.sort(function(a, b) {\r\n    if (a.count < b.count) return 1;\r\n    if (a.count > b.count) return -1;\r\n    return 0;\r\n});\r\n\r\nusageTable.length = showTopAccounts\r\n\r\n// ----------------------------------------\r\n// -- send the email\r\n// ----------------------------------------\r\n\r\nvar obj = {\r\n  to: sendTo,\r\n  subject: 'IoT Bridge Daily Summary - ' + serverName,\r\n  title: 'IoT Bridge Daily Summary - '+ serverName,\r\n  message: 'Here is today\\'s daily summary for {{.ServerName}}.',\r\n  params: {\r\n    ServerName: serverName\r\n  },\r\n  tables: [\r\n  {\r\n    title: 'New accounts',\r\n    columns: [ 'fullName', 'dateCreated'],\r\n    headers: [ 'Name', 'Created'],\r\n    rows: newAccountsTable\r\n  },\r\n  {\r\n    title: 'Account usage',\r\n    columns: [ 'name', 'count', 'success', 'failure'],\r\n    headers: [ 'Name', 'Total', 'Successes', 'Failures'],\r\n    rows: usageTable\r\n  }]\r\n}\r\nemail.send(obj)",
      "filterType": "cron-event",
      "filterCron": "11 * * * *"
    }
  ],
  "triggerGlobals": [
    {
      "key": "dailySummaryConfig",
      "value": {
        "name": "prod-us",
        "sendTo": [
          "{{.sendTo}}"
        ],
        "showAccountsCreatedInPastDays": 7,
        "showTopAccounts": 20
      }
    }
  ],
  "templateDef": [
    {
      "name": "Send To",
      "key": "sendTo",
      "desc": "Email address to send the daily summary to"
    }
  ]
}